#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline:
        sokol-shdc --input shaders/bloom.glsl --output include/OE/bloom.glsl.h --format sokol --slang glsl410 --ifdef

    Overview:
    =========
    Shader program: 'OEBQuad':
        Get shader desc: OEBQuad_shader_desc(sg_query_backend());
        Vertex Shader: OEBQuad_vs
        Fragment Shader: OEBQuad_fs
        Attributes:
            ATTR_OEBQuad_OEBQuad_position => 0
            ATTR_OEBQuad_OEBQuad_texcoord => 1
    Bindings:
        Uniform block 'OEBloom_params':
            C struct: OEBloom_params_t
            Bind slot: UB_OEBloom_params => 1
        Texture 'OEBTex':
            Image type: SG_IMAGETYPE_2D
            Sample type: SG_IMAGESAMPLETYPE_FLOAT
            Multisampled: false
            Bind slot: VIEW_OEBTex => 0
        Sampler 'OEBSmp':
            Type: SG_SAMPLERTYPE_FILTERING
            Bind slot: SMP_OEBSmp => 0
*/
#if !defined(SOKOL_GFX_INCLUDED)
#error "Please include sokol_gfx.h before bloom.glsl.h"
#endif
#if !defined(SOKOL_SHDC_ALIGN)
#if defined(_MSC_VER)
#define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
#else
#define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
#endif
#endif
#define ATTR_OEBQuad_OEBQuad_position (0)
#define ATTR_OEBQuad_OEBQuad_texcoord (1)
#define UB_OEBloom_params (1)
#define VIEW_OEBTex (0)
#define SMP_OEBSmp (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct OEBloom_params_t {
    float thresh;
    float strength;
    vec2 resolution;
} OEBloom_params_t;
#pragma pack(pop)
/*
    #version 410

    layout(location = 0) out vec2 uv;
    layout(location = 1) in vec2 OEBQuad_texcoord;
    layout(location = 0) in vec2 OEBQuad_position;

    void main()
    {
        uv = OEBQuad_texcoord;
        gl_Position = vec4(OEBQuad_position, 0.0, 1.0);
    }

*/
#if defined(SOKOL_GLCORE)
static const uint8_t OEBQuad_vs_source_glsl410[240] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x34,0x31,0x30,0x0a,0x0a,0x6c,0x61,
    0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x75,0x76,0x3b,0x0a,
    0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x31,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x4f,0x45,0x42,
    0x51,0x75,0x61,0x64,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x6c,
    0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x4f,0x45,0x42,0x51,
    0x75,0x61,0x64,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x0a,0x76,
    0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x75,0x76,0x20,0x3d,0x20,0x4f,0x45,0x42,0x51,0x75,0x61,0x64,0x5f,0x74,0x65,
    0x78,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,
    0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x4f,
    0x45,0x42,0x51,0x75,0x61,0x64,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,
    0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,

};
#endif
/*
    #version 410

    uniform vec4 OEBloom_params[1];
    uniform sampler2D OEBTex_OEBSmp;

    layout(location = 0) in vec2 uv;
    layout(location = 0) out vec4 frag_color;

    void main()
    {
        vec2 _26 = vec2(1.0 / OEBloom_params[0].z, 1.0 / OEBloom_params[0].w);
        vec3 _48 = texture(OEBTex_OEBSmp, uv).xyz;
        vec2 _120 = uv + (_26 * vec2(-1.0, 1.0));
        frag_color = vec4(_48 + (((((((((((_48 + texture(OEBTex_OEBSmp, uv + (_26 * vec2(-1.0))).xyz) + texture(OEBTex_OEBSmp, uv + (_26 * vec2(0.0, -1.0))).xyz) + texture(OEBTex_OEBSmp, uv + (_26 * vec2(1.0, -1.0))).xyz) + texture(OEBTex_OEBSmp, _120).xyz) + texture(OEBTex_OEBSmp, uv + (_26 * vec2(1.0, 0.0))).xyz) + texture(OEBTex_OEBSmp, _120).xyz) + texture(OEBTex_OEBSmp, uv + (_26 * vec2(0.0, 1.0))).xyz) + texture(OEBTex_OEBSmp, uv + _26).xyz) * vec3(0.111111111938953399658203125)) * clamp((dot(_48, vec3(0.2989999949932098388671875, 0.58700001239776611328125, 0.114000000059604644775390625)) - OEBloom_params[0].x) * (1.0 / (1.0 - OEBloom_params[0].x)), 0.0, 1.0)) * OEBloom_params[0].y), 1.0);
    }

*/
#if defined(SOKOL_GLCORE)
static const uint8_t OEBQuad_fs_source_glsl410[1043] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x34,0x31,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x4f,0x45,0x42,0x6c,0x6f,
    0x6f,0x6d,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x3b,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,
    0x4f,0x45,0x42,0x54,0x65,0x78,0x5f,0x4f,0x45,0x42,0x53,0x6d,0x70,0x3b,0x0a,0x0a,
    0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x75,0x76,0x3b,
    0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x66,
    0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,
    0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,
    0x63,0x32,0x20,0x5f,0x32,0x36,0x20,0x3d,0x20,0x76,0x65,0x63,0x32,0x28,0x31,0x2e,
    0x30,0x20,0x2f,0x20,0x4f,0x45,0x42,0x6c,0x6f,0x6f,0x6d,0x5f,0x70,0x61,0x72,0x61,
    0x6d,0x73,0x5b,0x30,0x5d,0x2e,0x7a,0x2c,0x20,0x31,0x2e,0x30,0x20,0x2f,0x20,0x4f,
    0x45,0x42,0x6c,0x6f,0x6f,0x6d,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,
    0x2e,0x77,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x34,
    0x38,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x4f,0x45,0x42,0x54,
    0x65,0x78,0x5f,0x4f,0x45,0x42,0x53,0x6d,0x70,0x2c,0x20,0x75,0x76,0x29,0x2e,0x78,
    0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x32,0x20,0x5f,0x31,0x32,
    0x30,0x20,0x3d,0x20,0x75,0x76,0x20,0x2b,0x20,0x28,0x5f,0x32,0x36,0x20,0x2a,0x20,
    0x76,0x65,0x63,0x32,0x28,0x2d,0x31,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,
    0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x5f,0x34,0x38,0x20,0x2b,0x20,0x28,0x28,
    0x28,0x28,0x28,0x28,0x28,0x28,0x28,0x28,0x28,0x5f,0x34,0x38,0x20,0x2b,0x20,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x4f,0x45,0x42,0x54,0x65,0x78,0x5f,0x4f,0x45,
    0x42,0x53,0x6d,0x70,0x2c,0x20,0x75,0x76,0x20,0x2b,0x20,0x28,0x5f,0x32,0x36,0x20,
    0x2a,0x20,0x76,0x65,0x63,0x32,0x28,0x2d,0x31,0x2e,0x30,0x29,0x29,0x29,0x2e,0x78,
    0x79,0x7a,0x29,0x20,0x2b,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x4f,0x45,
    0x42,0x54,0x65,0x78,0x5f,0x4f,0x45,0x42,0x53,0x6d,0x70,0x2c,0x20,0x75,0x76,0x20,
    0x2b,0x20,0x28,0x5f,0x32,0x36,0x20,0x2a,0x20,0x76,0x65,0x63,0x32,0x28,0x30,0x2e,
    0x30,0x2c,0x20,0x2d,0x31,0x2e,0x30,0x29,0x29,0x29,0x2e,0x78,0x79,0x7a,0x29,0x20,
    0x2b,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x4f,0x45,0x42,0x54,0x65,0x78,
    0x5f,0x4f,0x45,0x42,0x53,0x6d,0x70,0x2c,0x20,0x75,0x76,0x20,0x2b,0x20,0x28,0x5f,
    0x32,0x36,0x20,0x2a,0x20,0x76,0x65,0x63,0x32,0x28,0x31,0x2e,0x30,0x2c,0x20,0x2d,
    0x31,0x2e,0x30,0x29,0x29,0x29,0x2e,0x78,0x79,0x7a,0x29,0x20,0x2b,0x20,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x28,0x4f,0x45,0x42,0x54,0x65,0x78,0x5f,0x4f,0x45,0x42,
    0x53,0x6d,0x70,0x2c,0x20,0x5f,0x31,0x32,0x30,0x29,0x2e,0x78,0x79,0x7a,0x29,0x20,
    0x2b,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x4f,0x45,0x42,0x54,0x65,0x78,
    0x5f,0x4f,0x45,0x42,0x53,0x6d,0x70,0x2c,0x20,0x75,0x76,0x20,0x2b,0x20,0x28,0x5f,
    0x32,0x36,0x20,0x2a,0x20,0x76,0x65,0x63,0x32,0x28,0x31,0x2e,0x30,0x2c,0x20,0x30,
    0x2e,0x30,0x29,0x29,0x29,0x2e,0x78,0x79,0x7a,0x29,0x20,0x2b,0x20,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x28,0x4f,0x45,0x42,0x54,0x65,0x78,0x5f,0x4f,0x45,0x42,0x53,
    0x6d,0x70,0x2c,0x20,0x5f,0x31,0x32,0x30,0x29,0x2e,0x78,0x79,0x7a,0x29,0x20,0x2b,
    0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x4f,0x45,0x42,0x54,0x65,0x78,0x5f,
    0x4f,0x45,0x42,0x53,0x6d,0x70,0x2c,0x20,0x75,0x76,0x20,0x2b,0x20,0x28,0x5f,0x32,
    0x36,0x20,0x2a,0x20,0x76,0x65,0x63,0x32,0x28,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,
    0x30,0x29,0x29,0x29,0x2e,0x78,0x79,0x7a,0x29,0x20,0x2b,0x20,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x28,0x4f,0x45,0x42,0x54,0x65,0x78,0x5f,0x4f,0x45,0x42,0x53,0x6d,
    0x70,0x2c,0x20,0x75,0x76,0x20,0x2b,0x20,0x5f,0x32,0x36,0x29,0x2e,0x78,0x79,0x7a,
    0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x31,0x31,0x31,0x31,0x31,
    0x31,0x31,0x31,0x31,0x39,0x33,0x38,0x39,0x35,0x33,0x33,0x39,0x39,0x36,0x35,0x38,
    0x32,0x30,0x33,0x31,0x32,0x35,0x29,0x29,0x20,0x2a,0x20,0x63,0x6c,0x61,0x6d,0x70,
    0x28,0x28,0x64,0x6f,0x74,0x28,0x5f,0x34,0x38,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,
    0x30,0x2e,0x32,0x39,0x38,0x39,0x39,0x39,0x39,0x39,0x34,0x39,0x39,0x33,0x32,0x30,
    0x39,0x38,0x33,0x38,0x38,0x36,0x37,0x31,0x38,0x37,0x35,0x2c,0x20,0x30,0x2e,0x35,
    0x38,0x37,0x30,0x30,0x30,0x30,0x31,0x32,0x33,0x39,0x37,0x37,0x36,0x36,0x31,0x31,
    0x33,0x32,0x38,0x31,0x32,0x35,0x2c,0x20,0x30,0x2e,0x31,0x31,0x34,0x30,0x30,0x30,
    0x30,0x30,0x30,0x30,0x35,0x39,0x36,0x30,0x34,0x36,0x34,0x34,0x37,0x37,0x35,0x33,
    0x39,0x30,0x36,0x32,0x35,0x29,0x29,0x20,0x2d,0x20,0x4f,0x45,0x42,0x6c,0x6f,0x6f,
    0x6d,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2e,0x78,0x29,0x20,0x2a,
    0x20,0x28,0x31,0x2e,0x30,0x20,0x2f,0x20,0x28,0x31,0x2e,0x30,0x20,0x2d,0x20,0x4f,
    0x45,0x42,0x6c,0x6f,0x6f,0x6d,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,
    0x2e,0x78,0x29,0x29,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,
    0x20,0x2a,0x20,0x4f,0x45,0x42,0x6c,0x6f,0x6f,0x6d,0x5f,0x70,0x61,0x72,0x61,0x6d,
    0x73,0x5b,0x30,0x5d,0x2e,0x79,0x29,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,
    0x0a,0x0a,0x00,
};
#endif
static inline const sg_shader_desc* OEBQuad_shader_desc(sg_backend backend) {
    #if defined(SOKOL_GLCORE)
    if (backend == SG_BACKEND_GLCORE) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.vertex_func.source = (const char*)OEBQuad_vs_source_glsl410;
            desc.vertex_func.entry = "main";
            desc.fragment_func.source = (const char*)OEBQuad_fs_source_glsl410;
            desc.fragment_func.entry = "main";
            desc.attrs[0].base_type = SG_SHADERATTRBASETYPE_FLOAT;
            desc.attrs[0].glsl_name = "OEBQuad_position";
            desc.attrs[1].base_type = SG_SHADERATTRBASETYPE_FLOAT;
            desc.attrs[1].glsl_name = "OEBQuad_texcoord";
            desc.uniform_blocks[1].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.uniform_blocks[1].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[1].size = 16;
            desc.uniform_blocks[1].glsl_uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
            desc.uniform_blocks[1].glsl_uniforms[0].array_count = 1;
            desc.uniform_blocks[1].glsl_uniforms[0].glsl_name = "OEBloom_params";
            desc.views[0].texture.stage = SG_SHADERSTAGE_FRAGMENT;
            desc.views[0].texture.image_type = SG_IMAGETYPE_2D;
            desc.views[0].texture.sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.views[0].texture.multisampled = false;
            desc.samplers[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.samplers[0].sampler_type = SG_SAMPLERTYPE_FILTERING;
            desc.texture_sampler_pairs[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.texture_sampler_pairs[0].view_slot = 0;
            desc.texture_sampler_pairs[0].sampler_slot = 0;
            desc.texture_sampler_pairs[0].glsl_name = "OEBTex_OEBSmp";
            desc.label = "OEBQuad_shader";
        }
        return &desc;
    }
    #endif /* SOKOL_GLCORE */
    return 0;
}
