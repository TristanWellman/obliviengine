#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline:
        sokol-shdc --input shaders/simple_low.glsl --output include/OE/simple_low.glsl.h --format sokol --slang glsl410 --ifdef

    Overview:
    =========
    Shader program: 'simple_low':
        Get shader desc: simple_low_shader_desc(sg_query_backend());
        Vertex Shader: OELOW_vs
        Fragment Shader: OELOW_fs
        Attributes:
            ATTR_simple_low_position => 0
            ATTR_simple_low_color0 => 1
            ATTR_simple_low_normal0 => 2
            ATTR_simple_low_texcoord0 => 3
    Bindings:
        Uniform block 'OELOW_vs_params':
            C struct: OELOW_vs_params_t
            Bind slot: UB_OELOW_vs_params => 0
        Uniform block 'OELOW_fs_params':
            C struct: OELOW_fs_params_t
            Bind slot: UB_OELOW_fs_params => 3
        Uniform block 'OELOW_light_params':
            C struct: OELOW_light_params_t
            Bind slot: UB_OELOW_light_params => 1
        Texture '_texture':
            Image type: SG_IMAGETYPE_2D
            Sample type: SG_IMAGESAMPLETYPE_FLOAT
            Multisampled: false
            Bind slot: VIEW__texture => 3
        Sampler 'smp':
            Type: SG_SAMPLERTYPE_FILTERING
            Bind slot: SMP_smp => 3
*/
#if !defined(SOKOL_GFX_INCLUDED)
#error "Please include sokol_gfx.h before simple_low.glsl.h"
#endif
#if !defined(SOKOL_SHDC_ALIGN)
#if defined(_MSC_VER)
#define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
#else
#define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
#endif
#endif
#define ATTR_simple_low_position (0)
#define ATTR_simple_low_color0 (1)
#define ATTR_simple_low_normal0 (2)
#define ATTR_simple_low_texcoord0 (3)
#define UB_OELOW_vs_params (0)
#define UB_OELOW_fs_params (3)
#define UB_OELOW_light_params (1)
#define VIEW__texture (3)
#define SMP_smp (3)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct OELOW_vs_params_t {
    mat4x4 mvp;
    mat4x4 model;
    mat4x4 view;
} OELOW_vs_params_t;
#pragma pack(pop)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct OELOW_fs_params_t {
    vec3 camPos;
    int numLights;
} OELOW_fs_params_t;
#pragma pack(pop)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct OELOW_light_params_t {
    vec4 positions[64];
    vec4 colors[64];
} OELOW_light_params_t;
#pragma pack(pop)
/*
    #version 410

    uniform vec4 OELOW_vs_params[12];
    layout(location = 0) in vec3 position;
    layout(location = 0) out vec4 color;
    layout(location = 1) in vec4 color0;
    layout(location = 1) out vec3 normal;
    layout(location = 2) in vec3 normal0;
    layout(location = 2) out vec3 fragPos;
    layout(location = 3) out vec3 viewSpacePos;
    layout(location = 4) out vec3 viewSpaceNorm;
    layout(location = 5) out vec2 texcoord;
    layout(location = 3) in vec2 texcoord0;

    float QISQRT(float _x)
    {
        float _32 = uintBitsToFloat(1597463007u - (floatBitsToUint(_x) >> uint(1)));
        return _32 * (1.5 - (((0.5 * _x) * _32) * _32));
    }

    vec3 WNORM(vec3 _x)
    {
        float param = ((_x.x * _x.x) + (_x.y * _x.y)) + (_x.z * _x.z);
        float param_1 = ((_x.x * _x.x) + (_x.y * _x.y)) + (_x.z * _x.z);
        float param_2 = ((_x.x * _x.x) + (_x.y * _x.y)) + (_x.z * _x.z);
        return vec3(_x.x * QISQRT(param), _x.y * QISQRT(param_1), _x.z * QISQRT(param_2));
    }

    void main()
    {
        vec4 _138 = vec4(position, 1.0);
        gl_Position = mat4(OELOW_vs_params[0], OELOW_vs_params[1], OELOW_vs_params[2], OELOW_vs_params[3]) * _138;
        color = color0;
        mat4 _150 = mat4(OELOW_vs_params[4], OELOW_vs_params[5], OELOW_vs_params[6], OELOW_vs_params[7]);
        vec3 param = transpose(inverse(mat3(_150[0].xyz, _150[1].xyz, _150[2].xyz))) * normal0;
        normal = WNORM(param);
        fragPos = vec3((_150 * _138).xyz);
        mat4 _184 = mat4(OELOW_vs_params[8], OELOW_vs_params[9], OELOW_vs_params[10], OELOW_vs_params[11]);
        viewSpacePos = vec3((_184 * vec4(fragPos, 1.0)).xyz);
        vec3 param_1 = mat3(_184[0].xyz, _184[1].xyz, _184[2].xyz) * normal;
        viewSpaceNorm = WNORM(param_1);
        texcoord = texcoord0;
    }

*/
#if defined(SOKOL_GLCORE)
static const uint8_t OELOW_vs_source_glsl410[1668] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x34,0x31,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x4f,0x45,0x4c,0x4f,0x57,
    0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x32,0x5d,0x3b,0x0a,
    0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,
    0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,
    0x76,0x65,0x63,0x34,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x6c,0x61,0x79,0x6f,
    0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,
    0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x30,0x3b,
    0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x31,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x33,0x20,0x6e,
    0x6f,0x72,0x6d,0x61,0x6c,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,
    0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x32,0x29,0x20,0x69,0x6e,0x20,0x76,
    0x65,0x63,0x33,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x30,0x3b,0x0a,0x6c,0x61,0x79,
    0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x32,
    0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x33,0x20,0x66,0x72,0x61,0x67,0x50,
    0x6f,0x73,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,
    0x69,0x6f,0x6e,0x20,0x3d,0x20,0x33,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,
    0x33,0x20,0x76,0x69,0x65,0x77,0x53,0x70,0x61,0x63,0x65,0x50,0x6f,0x73,0x3b,0x0a,
    0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x34,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x33,0x20,0x76,0x69,
    0x65,0x77,0x53,0x70,0x61,0x63,0x65,0x4e,0x6f,0x72,0x6d,0x3b,0x0a,0x6c,0x61,0x79,
    0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x35,
    0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x74,0x65,0x78,0x63,0x6f,
    0x6f,0x72,0x64,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,
    0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x33,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,
    0x32,0x20,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x30,0x3b,0x0a,0x0a,0x66,0x6c,
    0x6f,0x61,0x74,0x20,0x51,0x49,0x53,0x51,0x52,0x54,0x28,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x5f,0x78,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x5f,0x33,0x32,0x20,0x3d,0x20,0x75,0x69,0x6e,0x74,0x42,0x69,0x74,0x73,0x54,
    0x6f,0x46,0x6c,0x6f,0x61,0x74,0x28,0x31,0x35,0x39,0x37,0x34,0x36,0x33,0x30,0x30,
    0x37,0x75,0x20,0x2d,0x20,0x28,0x66,0x6c,0x6f,0x61,0x74,0x42,0x69,0x74,0x73,0x54,
    0x6f,0x55,0x69,0x6e,0x74,0x28,0x5f,0x78,0x29,0x20,0x3e,0x3e,0x20,0x75,0x69,0x6e,
    0x74,0x28,0x31,0x29,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,
    0x72,0x6e,0x20,0x5f,0x33,0x32,0x20,0x2a,0x20,0x28,0x31,0x2e,0x35,0x20,0x2d,0x20,
    0x28,0x28,0x28,0x30,0x2e,0x35,0x20,0x2a,0x20,0x5f,0x78,0x29,0x20,0x2a,0x20,0x5f,
    0x33,0x32,0x29,0x20,0x2a,0x20,0x5f,0x33,0x32,0x29,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,
    0x76,0x65,0x63,0x33,0x20,0x57,0x4e,0x4f,0x52,0x4d,0x28,0x76,0x65,0x63,0x33,0x20,
    0x5f,0x78,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x28,0x28,0x5f,0x78,0x2e,0x78,0x20,0x2a,
    0x20,0x5f,0x78,0x2e,0x78,0x29,0x20,0x2b,0x20,0x28,0x5f,0x78,0x2e,0x79,0x20,0x2a,
    0x20,0x5f,0x78,0x2e,0x79,0x29,0x29,0x20,0x2b,0x20,0x28,0x5f,0x78,0x2e,0x7a,0x20,
    0x2a,0x20,0x5f,0x78,0x2e,0x7a,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,0x20,0x28,0x28,0x5f,
    0x78,0x2e,0x78,0x20,0x2a,0x20,0x5f,0x78,0x2e,0x78,0x29,0x20,0x2b,0x20,0x28,0x5f,
    0x78,0x2e,0x79,0x20,0x2a,0x20,0x5f,0x78,0x2e,0x79,0x29,0x29,0x20,0x2b,0x20,0x28,
    0x5f,0x78,0x2e,0x7a,0x20,0x2a,0x20,0x5f,0x78,0x2e,0x7a,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x20,
    0x3d,0x20,0x28,0x28,0x5f,0x78,0x2e,0x78,0x20,0x2a,0x20,0x5f,0x78,0x2e,0x78,0x29,
    0x20,0x2b,0x20,0x28,0x5f,0x78,0x2e,0x79,0x20,0x2a,0x20,0x5f,0x78,0x2e,0x79,0x29,
    0x29,0x20,0x2b,0x20,0x28,0x5f,0x78,0x2e,0x7a,0x20,0x2a,0x20,0x5f,0x78,0x2e,0x7a,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x76,0x65,
    0x63,0x33,0x28,0x5f,0x78,0x2e,0x78,0x20,0x2a,0x20,0x51,0x49,0x53,0x51,0x52,0x54,
    0x28,0x70,0x61,0x72,0x61,0x6d,0x29,0x2c,0x20,0x5f,0x78,0x2e,0x79,0x20,0x2a,0x20,
    0x51,0x49,0x53,0x51,0x52,0x54,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x29,0x2c,
    0x20,0x5f,0x78,0x2e,0x7a,0x20,0x2a,0x20,0x51,0x49,0x53,0x51,0x52,0x54,0x28,0x70,
    0x61,0x72,0x61,0x6d,0x5f,0x32,0x29,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x6f,0x69,
    0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,
    0x65,0x63,0x34,0x20,0x5f,0x31,0x33,0x38,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,
    0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x4f,0x45,0x4c,0x4f,0x57,0x5f,0x76,0x73,0x5f,
    0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2c,0x20,0x4f,0x45,0x4c,0x4f,0x57,
    0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x2c,0x20,0x4f,
    0x45,0x4c,0x4f,0x57,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,
    0x5d,0x2c,0x20,0x4f,0x45,0x4c,0x4f,0x57,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,
    0x6d,0x73,0x5b,0x33,0x5d,0x29,0x20,0x2a,0x20,0x5f,0x31,0x33,0x38,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x63,0x6f,0x6c,0x6f,0x72,
    0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x34,0x20,0x5f,0x31,0x35,0x30,
    0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x4f,0x45,0x4c,0x4f,0x57,0x5f,0x76,0x73,
    0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x34,0x5d,0x2c,0x20,0x4f,0x45,0x4c,0x4f,
    0x57,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x35,0x5d,0x2c,0x20,
    0x4f,0x45,0x4c,0x4f,0x57,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,
    0x36,0x5d,0x2c,0x20,0x4f,0x45,0x4c,0x4f,0x57,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,
    0x61,0x6d,0x73,0x5b,0x37,0x5d,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,
    0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x74,0x72,0x61,0x6e,0x73,0x70,
    0x6f,0x73,0x65,0x28,0x69,0x6e,0x76,0x65,0x72,0x73,0x65,0x28,0x6d,0x61,0x74,0x33,
    0x28,0x5f,0x31,0x35,0x30,0x5b,0x30,0x5d,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x5f,0x31,
    0x35,0x30,0x5b,0x31,0x5d,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x5f,0x31,0x35,0x30,0x5b,
    0x32,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x29,0x29,0x20,0x2a,0x20,0x6e,0x6f,0x72,0x6d,
    0x61,0x6c,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x20,
    0x3d,0x20,0x57,0x4e,0x4f,0x52,0x4d,0x28,0x70,0x61,0x72,0x61,0x6d,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x50,0x6f,0x73,0x20,0x3d,0x20,0x76,0x65,
    0x63,0x33,0x28,0x28,0x5f,0x31,0x35,0x30,0x20,0x2a,0x20,0x5f,0x31,0x33,0x38,0x29,
    0x2e,0x78,0x79,0x7a,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x34,0x20,
    0x5f,0x31,0x38,0x34,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x4f,0x45,0x4c,0x4f,
    0x57,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x38,0x5d,0x2c,0x20,
    0x4f,0x45,0x4c,0x4f,0x57,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,
    0x39,0x5d,0x2c,0x20,0x4f,0x45,0x4c,0x4f,0x57,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,
    0x61,0x6d,0x73,0x5b,0x31,0x30,0x5d,0x2c,0x20,0x4f,0x45,0x4c,0x4f,0x57,0x5f,0x76,
    0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x31,0x5d,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x76,0x69,0x65,0x77,0x53,0x70,0x61,0x63,0x65,0x50,0x6f,0x73,0x20,
    0x3d,0x20,0x76,0x65,0x63,0x33,0x28,0x28,0x5f,0x31,0x38,0x34,0x20,0x2a,0x20,0x76,
    0x65,0x63,0x34,0x28,0x66,0x72,0x61,0x67,0x50,0x6f,0x73,0x2c,0x20,0x31,0x2e,0x30,
    0x29,0x29,0x2e,0x78,0x79,0x7a,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,
    0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,0x20,0x6d,0x61,0x74,0x33,
    0x28,0x5f,0x31,0x38,0x34,0x5b,0x30,0x5d,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x5f,0x31,
    0x38,0x34,0x5b,0x31,0x5d,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x5f,0x31,0x38,0x34,0x5b,
    0x32,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x20,0x2a,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x69,0x65,0x77,0x53,0x70,0x61,0x63,0x65,0x4e,
    0x6f,0x72,0x6d,0x20,0x3d,0x20,0x57,0x4e,0x4f,0x52,0x4d,0x28,0x70,0x61,0x72,0x61,
    0x6d,0x5f,0x31,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x74,0x65,0x78,0x63,0x6f,0x6f,
    0x72,0x64,0x20,0x3d,0x20,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x30,0x3b,0x0a,
    0x7d,0x0a,0x0a,0x00,
};
#endif
/*
    #version 410

    struct OELOW_fs_params
    {
        vec3 camPos;
        int numLights;
    };

    uniform OELOW_fs_params _174;

    uniform vec4 OELOW_light_params[128];
    uniform sampler2D _texture_smp;

    layout(location = 1) out vec4 depth_color;
    layout(location = 2) out vec4 normal_color;
    layout(location = 4) in vec3 viewSpaceNorm;
    layout(location = 3) out vec4 position_color;
    layout(location = 3) in vec3 viewSpacePos;
    layout(location = 1) in vec3 normal;
    layout(location = 2) in vec3 fragPos;
    layout(location = 5) in vec2 texcoord;
    layout(location = 0) out vec4 frag_color;
    layout(location = 0) in vec4 color;

    float QISQRT(float _x)
    {
        float _41 = uintBitsToFloat(1597463007u - (floatBitsToUint(_x) >> uint(1)));
        return _41 * (1.5 - (((0.5 * _x) * _41) * _41));
    }

    vec3 WNORM(vec3 _x)
    {
        float param = ((_x.x * _x.x) + (_x.y * _x.y)) + (_x.z * _x.z);
        float param_1 = ((_x.x * _x.x) + (_x.y * _x.y)) + (_x.z * _x.z);
        float param_2 = ((_x.x * _x.x) + (_x.y * _x.y)) + (_x.z * _x.z);
        return vec3(_x.x * QISQRT(param), _x.y * QISQRT(param_1), _x.z * QISQRT(param_2));
    }

    float QSQRT(float _x)
    {
        float param = _x;
        return _x * QISQRT(param);
    }

    void depth()
    {
        depth_color = vec4(gl_FragCoord.z, gl_FragCoord.z, gl_FragCoord.z, 1.0);
    }

    void normal_c()
    {
        normal_color = vec4((viewSpaceNorm * 0.5) + vec3(0.5), 1.0);
    }

    void position()
    {
        position_color = vec4(viewSpacePos, 1.0);
    }

    void main()
    {
        vec3 param = normal;
        vec3 _170 = WNORM(param);
        vec3 param_1 = _174.camPos - fragPos;
        vec3 ad = vec3(0.0);
        int _210 = clamp(_174.numLights, 0, 64);
        for (int i = 0; i < _210; i++)
        {
            vec3 _237 = vec3(OELOW_light_params[i * 1 + 0].xyz) - fragPos;
            float param_2 = dot(_237, _237);
            float _249 = QSQRT(param_2);
            vec3 param_3 = vec3(OELOW_light_params[i * 1 + 0].xyz) - fragPos;
            ad += (((vec3((OELOW_light_params[i * 1 + 64] * (OELOW_light_params[i * 1 + 64].w * 1.5)).xyz) * vec3(0.699999988079071044921875)) * max(dot(_170, WNORM(param_3)), 0.0)) * (1.0 / (_249 * _249)));
        }
        vec3 _304 = ad * texture(_texture_smp, texcoord).xyz;
        frag_color = vec4(pow((vec3(0.00200000009499490261077880859375) + _304) / (_304 + vec3(1.00199997425079345703125)), vec3(0.449999988079071044921875)) * vec3(color.xyz), 1.0);
        depth();
        normal_c();
        position();
    }

*/
#if defined(SOKOL_GLCORE)
static const uint8_t OELOW_fs_source_glsl410[2342] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x34,0x31,0x30,0x0a,0x0a,0x73,0x74,
    0x72,0x75,0x63,0x74,0x20,0x4f,0x45,0x4c,0x4f,0x57,0x5f,0x66,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,
    0x63,0x61,0x6d,0x50,0x6f,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,
    0x6e,0x75,0x6d,0x4c,0x69,0x67,0x68,0x74,0x73,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x75,
    0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x4f,0x45,0x4c,0x4f,0x57,0x5f,0x66,0x73,0x5f,
    0x70,0x61,0x72,0x61,0x6d,0x73,0x20,0x5f,0x31,0x37,0x34,0x3b,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x4f,0x45,0x4c,0x4f,0x57,
    0x5f,0x6c,0x69,0x67,0x68,0x74,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x32,
    0x38,0x5d,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,
    0x6c,0x65,0x72,0x32,0x44,0x20,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x73,
    0x6d,0x70,0x3b,0x0a,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,
    0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,
    0x63,0x34,0x20,0x64,0x65,0x70,0x74,0x68,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,
    0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x32,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x6e,0x6f,
    0x72,0x6d,0x61,0x6c,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x6c,0x61,0x79,0x6f,
    0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x34,0x29,
    0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x76,0x69,0x65,0x77,0x53,0x70,0x61,
    0x63,0x65,0x4e,0x6f,0x72,0x6d,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,
    0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x33,0x29,0x20,0x6f,0x75,0x74,
    0x20,0x76,0x65,0x63,0x34,0x20,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x5f,0x63,
    0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,
    0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x33,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,
    0x63,0x33,0x20,0x76,0x69,0x65,0x77,0x53,0x70,0x61,0x63,0x65,0x50,0x6f,0x73,0x3b,
    0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x31,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x6e,0x6f,
    0x72,0x6d,0x61,0x6c,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,
    0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x32,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,
    0x63,0x33,0x20,0x66,0x72,0x61,0x67,0x50,0x6f,0x73,0x3b,0x0a,0x6c,0x61,0x79,0x6f,
    0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x35,0x29,
    0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,
    0x64,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,
    0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,
    0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x6c,0x61,0x79,
    0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,
    0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x3b,
    0x0a,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x20,0x51,0x49,0x53,0x51,0x52,0x54,0x28,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x5f,0x78,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x5f,0x34,0x31,0x20,0x3d,0x20,0x75,0x69,0x6e,0x74,0x42,
    0x69,0x74,0x73,0x54,0x6f,0x46,0x6c,0x6f,0x61,0x74,0x28,0x31,0x35,0x39,0x37,0x34,
    0x36,0x33,0x30,0x30,0x37,0x75,0x20,0x2d,0x20,0x28,0x66,0x6c,0x6f,0x61,0x74,0x42,
    0x69,0x74,0x73,0x54,0x6f,0x55,0x69,0x6e,0x74,0x28,0x5f,0x78,0x29,0x20,0x3e,0x3e,
    0x20,0x75,0x69,0x6e,0x74,0x28,0x31,0x29,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x5f,0x34,0x31,0x20,0x2a,0x20,0x28,0x31,0x2e,
    0x35,0x20,0x2d,0x20,0x28,0x28,0x28,0x30,0x2e,0x35,0x20,0x2a,0x20,0x5f,0x78,0x29,
    0x20,0x2a,0x20,0x5f,0x34,0x31,0x29,0x20,0x2a,0x20,0x5f,0x34,0x31,0x29,0x29,0x3b,
    0x0a,0x7d,0x0a,0x0a,0x76,0x65,0x63,0x33,0x20,0x57,0x4e,0x4f,0x52,0x4d,0x28,0x76,
    0x65,0x63,0x33,0x20,0x5f,0x78,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x28,0x28,0x5f,0x78,
    0x2e,0x78,0x20,0x2a,0x20,0x5f,0x78,0x2e,0x78,0x29,0x20,0x2b,0x20,0x28,0x5f,0x78,
    0x2e,0x79,0x20,0x2a,0x20,0x5f,0x78,0x2e,0x79,0x29,0x29,0x20,0x2b,0x20,0x28,0x5f,
    0x78,0x2e,0x7a,0x20,0x2a,0x20,0x5f,0x78,0x2e,0x7a,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,
    0x20,0x28,0x28,0x5f,0x78,0x2e,0x78,0x20,0x2a,0x20,0x5f,0x78,0x2e,0x78,0x29,0x20,
    0x2b,0x20,0x28,0x5f,0x78,0x2e,0x79,0x20,0x2a,0x20,0x5f,0x78,0x2e,0x79,0x29,0x29,
    0x20,0x2b,0x20,0x28,0x5f,0x78,0x2e,0x7a,0x20,0x2a,0x20,0x5f,0x78,0x2e,0x7a,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,
    0x6d,0x5f,0x32,0x20,0x3d,0x20,0x28,0x28,0x5f,0x78,0x2e,0x78,0x20,0x2a,0x20,0x5f,
    0x78,0x2e,0x78,0x29,0x20,0x2b,0x20,0x28,0x5f,0x78,0x2e,0x79,0x20,0x2a,0x20,0x5f,
    0x78,0x2e,0x79,0x29,0x29,0x20,0x2b,0x20,0x28,0x5f,0x78,0x2e,0x7a,0x20,0x2a,0x20,
    0x5f,0x78,0x2e,0x7a,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,
    0x6e,0x20,0x76,0x65,0x63,0x33,0x28,0x5f,0x78,0x2e,0x78,0x20,0x2a,0x20,0x51,0x49,
    0x53,0x51,0x52,0x54,0x28,0x70,0x61,0x72,0x61,0x6d,0x29,0x2c,0x20,0x5f,0x78,0x2e,
    0x79,0x20,0x2a,0x20,0x51,0x49,0x53,0x51,0x52,0x54,0x28,0x70,0x61,0x72,0x61,0x6d,
    0x5f,0x31,0x29,0x2c,0x20,0x5f,0x78,0x2e,0x7a,0x20,0x2a,0x20,0x51,0x49,0x53,0x51,
    0x52,0x54,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x29,0x29,0x3b,0x0a,0x7d,0x0a,
    0x0a,0x66,0x6c,0x6f,0x61,0x74,0x20,0x51,0x53,0x51,0x52,0x54,0x28,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x5f,0x78,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x5f,0x78,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x5f,0x78,0x20,0x2a,0x20,0x51,
    0x49,0x53,0x51,0x52,0x54,0x28,0x70,0x61,0x72,0x61,0x6d,0x29,0x3b,0x0a,0x7d,0x0a,
    0x0a,0x76,0x6f,0x69,0x64,0x20,0x64,0x65,0x70,0x74,0x68,0x28,0x29,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x64,0x65,0x70,0x74,0x68,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,
    0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x67,0x6c,0x5f,0x46,0x72,0x61,0x67,0x43,0x6f,
    0x6f,0x72,0x64,0x2e,0x7a,0x2c,0x20,0x67,0x6c,0x5f,0x46,0x72,0x61,0x67,0x43,0x6f,
    0x6f,0x72,0x64,0x2e,0x7a,0x2c,0x20,0x67,0x6c,0x5f,0x46,0x72,0x61,0x67,0x43,0x6f,
    0x6f,0x72,0x64,0x2e,0x7a,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,
    0x76,0x6f,0x69,0x64,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x5f,0x63,0x28,0x29,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x5f,0x63,0x6f,0x6c,
    0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x28,0x76,0x69,0x65,0x77,0x53,
    0x70,0x61,0x63,0x65,0x4e,0x6f,0x72,0x6d,0x20,0x2a,0x20,0x30,0x2e,0x35,0x29,0x20,
    0x2b,0x20,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x35,0x29,0x2c,0x20,0x31,0x2e,0x30,
    0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x70,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x70,0x6f,0x73,0x69,
    0x74,0x69,0x6f,0x6e,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,
    0x34,0x28,0x76,0x69,0x65,0x77,0x53,0x70,0x61,0x63,0x65,0x50,0x6f,0x73,0x2c,0x20,
    0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,
    0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,
    0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x31,0x37,0x30,0x20,0x3d,0x20,
    0x57,0x4e,0x4f,0x52,0x4d,0x28,0x70,0x61,0x72,0x61,0x6d,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,
    0x20,0x5f,0x31,0x37,0x34,0x2e,0x63,0x61,0x6d,0x50,0x6f,0x73,0x20,0x2d,0x20,0x66,
    0x72,0x61,0x67,0x50,0x6f,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,
    0x20,0x61,0x64,0x20,0x3d,0x20,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x30,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,0x32,0x31,0x30,0x20,0x3d,0x20,
    0x63,0x6c,0x61,0x6d,0x70,0x28,0x5f,0x31,0x37,0x34,0x2e,0x6e,0x75,0x6d,0x4c,0x69,
    0x67,0x68,0x74,0x73,0x2c,0x20,0x30,0x2c,0x20,0x36,0x34,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6f,0x72,0x20,0x28,0x69,0x6e,0x74,0x20,0x69,0x20,0x3d,0x20,0x30,
    0x3b,0x20,0x69,0x20,0x3c,0x20,0x5f,0x32,0x31,0x30,0x3b,0x20,0x69,0x2b,0x2b,0x29,
    0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x76,
    0x65,0x63,0x33,0x20,0x5f,0x32,0x33,0x37,0x20,0x3d,0x20,0x76,0x65,0x63,0x33,0x28,
    0x4f,0x45,0x4c,0x4f,0x57,0x5f,0x6c,0x69,0x67,0x68,0x74,0x5f,0x70,0x61,0x72,0x61,
    0x6d,0x73,0x5b,0x69,0x20,0x2a,0x20,0x31,0x20,0x2b,0x20,0x30,0x5d,0x2e,0x78,0x79,
    0x7a,0x29,0x20,0x2d,0x20,0x66,0x72,0x61,0x67,0x50,0x6f,0x73,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,
    0x6d,0x5f,0x32,0x20,0x3d,0x20,0x64,0x6f,0x74,0x28,0x5f,0x32,0x33,0x37,0x2c,0x20,
    0x5f,0x32,0x33,0x37,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x5f,0x32,0x34,0x39,0x20,0x3d,0x20,0x51,0x53,0x51,0x52,
    0x54,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,
    0x20,0x3d,0x20,0x76,0x65,0x63,0x33,0x28,0x4f,0x45,0x4c,0x4f,0x57,0x5f,0x6c,0x69,
    0x67,0x68,0x74,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x69,0x20,0x2a,0x20,0x31,
    0x20,0x2b,0x20,0x30,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x20,0x2d,0x20,0x66,0x72,0x61,
    0x67,0x50,0x6f,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x61,0x64,
    0x20,0x2b,0x3d,0x20,0x28,0x28,0x28,0x76,0x65,0x63,0x33,0x28,0x28,0x4f,0x45,0x4c,
    0x4f,0x57,0x5f,0x6c,0x69,0x67,0x68,0x74,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,
    0x69,0x20,0x2a,0x20,0x31,0x20,0x2b,0x20,0x36,0x34,0x5d,0x20,0x2a,0x20,0x28,0x4f,
    0x45,0x4c,0x4f,0x57,0x5f,0x6c,0x69,0x67,0x68,0x74,0x5f,0x70,0x61,0x72,0x61,0x6d,
    0x73,0x5b,0x69,0x20,0x2a,0x20,0x31,0x20,0x2b,0x20,0x36,0x34,0x5d,0x2e,0x77,0x20,
    0x2a,0x20,0x31,0x2e,0x35,0x29,0x29,0x2e,0x78,0x79,0x7a,0x29,0x20,0x2a,0x20,0x76,
    0x65,0x63,0x33,0x28,0x30,0x2e,0x36,0x39,0x39,0x39,0x39,0x39,0x39,0x38,0x38,0x30,
    0x37,0x39,0x30,0x37,0x31,0x30,0x34,0x34,0x39,0x32,0x31,0x38,0x37,0x35,0x29,0x29,
    0x20,0x2a,0x20,0x6d,0x61,0x78,0x28,0x64,0x6f,0x74,0x28,0x5f,0x31,0x37,0x30,0x2c,
    0x20,0x57,0x4e,0x4f,0x52,0x4d,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,0x29,0x29,
    0x2c,0x20,0x30,0x2e,0x30,0x29,0x29,0x20,0x2a,0x20,0x28,0x31,0x2e,0x30,0x20,0x2f,
    0x20,0x28,0x5f,0x32,0x34,0x39,0x20,0x2a,0x20,0x5f,0x32,0x34,0x39,0x29,0x29,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,
    0x20,0x5f,0x33,0x30,0x34,0x20,0x3d,0x20,0x61,0x64,0x20,0x2a,0x20,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x28,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x73,0x6d,
    0x70,0x2c,0x20,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x29,0x2e,0x78,0x79,0x7a,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,
    0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x70,0x6f,0x77,0x28,0x28,0x76,0x65,0x63,
    0x33,0x28,0x30,0x2e,0x30,0x30,0x32,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x39,0x34,
    0x39,0x39,0x34,0x39,0x30,0x32,0x36,0x31,0x30,0x37,0x37,0x38,0x38,0x30,0x38,0x35,
    0x39,0x33,0x37,0x35,0x29,0x20,0x2b,0x20,0x5f,0x33,0x30,0x34,0x29,0x20,0x2f,0x20,
    0x28,0x5f,0x33,0x30,0x34,0x20,0x2b,0x20,0x76,0x65,0x63,0x33,0x28,0x31,0x2e,0x30,
    0x30,0x31,0x39,0x39,0x39,0x39,0x37,0x34,0x32,0x35,0x30,0x37,0x39,0x33,0x34,0x35,
    0x37,0x30,0x33,0x31,0x32,0x35,0x29,0x29,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x30,
    0x2e,0x34,0x34,0x39,0x39,0x39,0x39,0x39,0x38,0x38,0x30,0x37,0x39,0x30,0x37,0x31,
    0x30,0x34,0x34,0x39,0x32,0x31,0x38,0x37,0x35,0x29,0x29,0x20,0x2a,0x20,0x76,0x65,
    0x63,0x33,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x78,0x79,0x7a,0x29,0x2c,0x20,0x31,
    0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x64,0x65,0x70,0x74,0x68,0x28,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x5f,0x63,0x28,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x28,0x29,
    0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
#endif
static inline const sg_shader_desc* simple_low_shader_desc(sg_backend backend) {
    #if defined(SOKOL_GLCORE)
    if (backend == SG_BACKEND_GLCORE) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.vertex_func.source = (const char*)OELOW_vs_source_glsl410;
            desc.vertex_func.entry = "main";
            desc.fragment_func.source = (const char*)OELOW_fs_source_glsl410;
            desc.fragment_func.entry = "main";
            desc.attrs[0].base_type = SG_SHADERATTRBASETYPE_FLOAT;
            desc.attrs[0].glsl_name = "position";
            desc.attrs[1].base_type = SG_SHADERATTRBASETYPE_FLOAT;
            desc.attrs[1].glsl_name = "color0";
            desc.attrs[2].base_type = SG_SHADERATTRBASETYPE_FLOAT;
            desc.attrs[2].glsl_name = "normal0";
            desc.attrs[3].base_type = SG_SHADERATTRBASETYPE_FLOAT;
            desc.attrs[3].glsl_name = "texcoord0";
            desc.uniform_blocks[0].stage = SG_SHADERSTAGE_VERTEX;
            desc.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[0].size = 192;
            desc.uniform_blocks[0].glsl_uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
            desc.uniform_blocks[0].glsl_uniforms[0].array_count = 12;
            desc.uniform_blocks[0].glsl_uniforms[0].glsl_name = "OELOW_vs_params";
            desc.uniform_blocks[1].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.uniform_blocks[1].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[1].size = 2048;
            desc.uniform_blocks[1].glsl_uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
            desc.uniform_blocks[1].glsl_uniforms[0].array_count = 128;
            desc.uniform_blocks[1].glsl_uniforms[0].glsl_name = "OELOW_light_params";
            desc.uniform_blocks[3].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.uniform_blocks[3].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[3].size = 16;
            desc.uniform_blocks[3].glsl_uniforms[0].type = SG_UNIFORMTYPE_FLOAT3;
            desc.uniform_blocks[3].glsl_uniforms[0].array_count = 0;
            desc.uniform_blocks[3].glsl_uniforms[0].glsl_name = "_174.camPos";
            desc.uniform_blocks[3].glsl_uniforms[1].type = SG_UNIFORMTYPE_INT;
            desc.uniform_blocks[3].glsl_uniforms[1].array_count = 0;
            desc.uniform_blocks[3].glsl_uniforms[1].glsl_name = "_174.numLights";
            desc.views[3].texture.stage = SG_SHADERSTAGE_FRAGMENT;
            desc.views[3].texture.image_type = SG_IMAGETYPE_2D;
            desc.views[3].texture.sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.views[3].texture.multisampled = false;
            desc.samplers[3].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.samplers[3].sampler_type = SG_SAMPLERTYPE_FILTERING;
            desc.texture_sampler_pairs[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.texture_sampler_pairs[0].view_slot = 3;
            desc.texture_sampler_pairs[0].sampler_slot = 3;
            desc.texture_sampler_pairs[0].glsl_name = "_texture_smp";
            desc.label = "simple_low_shader";
        }
        return &desc;
    }
    #endif /* SOKOL_GLCORE */
    return 0;
}
