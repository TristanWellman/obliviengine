#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline:
        sokol-shdc --input shaders/denoise.glsl --output include/OE/denoise.glsl.h --format sokol --slang glsl410 --ifdef

    Overview:
    =========
    Shader program: 'OEDNOISE':
        Get shader desc: OEDNOISE_shader_desc(sg_query_backend());
        Vertex Shader: vs_OEDNOISE
        Fragment Shader: fs_OEDNOISE
        Attributes:
            ATTR_OEDNOISE_OEDNOISE_position => 0
            ATTR_OEDNOISE_OEDNOISE_texcoord => 1
    Bindings:
        Uniform block 'OEDNOISE_params':
            C struct: OEDNOISE_params_t
            Bind slot: UB_OEDNOISE_params => 1
        Image 'OEDNOISE_texture':
            Image type: SG_IMAGETYPE_2D
            Sample type: SG_IMAGESAMPLETYPE_FLOAT
            Multisampled: false
            Bind slot: IMG_OEDNOISE_texture => 0
        Sampler 'OEDNOISE_smp':
            Type: SG_SAMPLERTYPE_FILTERING
            Bind slot: SMP_OEDNOISE_smp => 0
*/
#if !defined(SOKOL_GFX_INCLUDED)
#error "Please include sokol_gfx.h before denoise.glsl.h"
#endif
#if !defined(SOKOL_SHDC_ALIGN)
#if defined(_MSC_VER)
#define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
#else
#define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
#endif
#endif
#define ATTR_OEDNOISE_OEDNOISE_position (0)
#define ATTR_OEDNOISE_OEDNOISE_texcoord (1)
#define UB_OEDNOISE_params (1)
#define IMG_OEDNOISE_texture (0)
#define SMP_OEDNOISE_smp (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct OEDNOISE_params_t {
    vec2 resolution;
    uint8_t _pad_8[8];
} OEDNOISE_params_t;
#pragma pack(pop)
/*
    #version 410

    layout(location = 0) out vec2 uv;
    layout(location = 1) in vec2 OEDNOISE_texcoord;
    layout(location = 0) in vec2 OEDNOISE_position;

    void main()
    {
        uv = OEDNOISE_texcoord;
        gl_Position = vec4(OEDNOISE_position, 0.0, 1.0);
    }

*/
#if defined(SOKOL_GLCORE)
static const uint8_t vs_OEDNOISE_source_glsl410[244] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x34,0x31,0x30,0x0a,0x0a,0x6c,0x61,
    0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x75,0x76,0x3b,0x0a,
    0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x31,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x4f,0x45,0x44,
    0x4e,0x4f,0x49,0x53,0x45,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,
    0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x4f,0x45,0x44,
    0x4e,0x4f,0x49,0x53,0x45,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,
    0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x75,0x76,0x20,0x3d,0x20,0x4f,0x45,0x44,0x4e,0x4f,0x49,0x53,0x45,
    0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x67,
    0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x76,0x65,0x63,
    0x34,0x28,0x4f,0x45,0x44,0x4e,0x4f,0x49,0x53,0x45,0x5f,0x70,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,
    0x7d,0x0a,0x0a,0x00,
};
#endif
/*
    #version 410

    uniform vec4 OEDNOISE_params[1];
    uniform sampler2D OEDNOISE_texture_OEDNOISE_smp;

    layout(location = 0) in vec2 uv;
    layout(location = 0) out vec4 frag_color;

    void main()
    {
        vec4 _24 = texture(OEDNOISE_texture_OEDNOISE_smp, uv);
        float zBuff = 0.0;
        vec4 aBuff = vec4(0.0);
        vec2 d;
        vec2 _150 = d;
        _150.x = -4.0;
        d = _150;
        vec2 _161;
        vec2 _163;
        for (; d.x <= 4.0; _161 = d, _163 = _161, _163.x = _161.x + 1.0, d = _163)
        {
            vec2 _153 = d;
            float _69 = sqrt(16.0 - (_153.x * _153.x));
            vec2 _156 = _153;
            _156.y = -_69;
            d = _156;
            vec2 _158;
            vec2 _160;
            for (; d.y <= _69; _158 = d, _160 = _158, _160.y = _158.y + 1.0, d = _160)
            {
                vec4 _109 = texture(OEDNOISE_texture_OEDNOISE_smp, uv + (d / OEDNOISE_params[0].xy));
                vec3 _117 = (_109 - _24).xyz;
                float _128 = (exp(dot(_117, _117) * (-50.0)) * 3.98942279815673828125) * (exp(dot(d, d) * (-0.125)) * 3.18309879302978515625);
                zBuff += _128;
                aBuff += (_109 * _128);
            }
        }
        frag_color = aBuff / vec4(zBuff);
    }

*/
#if defined(SOKOL_GLCORE)
static const uint8_t fs_OEDNOISE_source_glsl410[1149] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x34,0x31,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x4f,0x45,0x44,0x4e,0x4f,
    0x49,0x53,0x45,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x3b,0x0a,0x75,
    0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,
    0x20,0x4f,0x45,0x44,0x4e,0x4f,0x49,0x53,0x45,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x5f,0x4f,0x45,0x44,0x4e,0x4f,0x49,0x53,0x45,0x5f,0x73,0x6d,0x70,0x3b,0x0a,
    0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x75,0x76,
    0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,
    0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,
    0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x76,0x6f,0x69,
    0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,
    0x65,0x63,0x34,0x20,0x5f,0x32,0x34,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x28,0x4f,0x45,0x44,0x4e,0x4f,0x49,0x53,0x45,0x5f,0x74,0x65,0x78,0x74,0x75,
    0x72,0x65,0x5f,0x4f,0x45,0x44,0x4e,0x4f,0x49,0x53,0x45,0x5f,0x73,0x6d,0x70,0x2c,
    0x20,0x75,0x76,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x7a,0x42,0x75,0x66,0x66,0x20,0x3d,0x20,0x30,0x2e,0x30,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x76,0x65,0x63,0x34,0x20,0x61,0x42,0x75,0x66,0x66,0x20,0x3d,0x20,0x76,0x65,
    0x63,0x34,0x28,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,
    0x32,0x20,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x32,0x20,0x5f,0x31,
    0x35,0x30,0x20,0x3d,0x20,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x5f,0x31,0x35,0x30,
    0x2e,0x78,0x20,0x3d,0x20,0x2d,0x34,0x2e,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x64,
    0x20,0x3d,0x20,0x5f,0x31,0x35,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,
    0x32,0x20,0x5f,0x31,0x36,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x32,
    0x20,0x5f,0x31,0x36,0x33,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6f,0x72,0x20,0x28,
    0x3b,0x20,0x64,0x2e,0x78,0x20,0x3c,0x3d,0x20,0x34,0x2e,0x30,0x3b,0x20,0x5f,0x31,
    0x36,0x31,0x20,0x3d,0x20,0x64,0x2c,0x20,0x5f,0x31,0x36,0x33,0x20,0x3d,0x20,0x5f,
    0x31,0x36,0x31,0x2c,0x20,0x5f,0x31,0x36,0x33,0x2e,0x78,0x20,0x3d,0x20,0x5f,0x31,
    0x36,0x31,0x2e,0x78,0x20,0x2b,0x20,0x31,0x2e,0x30,0x2c,0x20,0x64,0x20,0x3d,0x20,
    0x5f,0x31,0x36,0x33,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x32,0x20,0x5f,0x31,0x35,0x33,0x20,0x3d,0x20,
    0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x5f,0x36,0x39,0x20,0x3d,0x20,0x73,0x71,0x72,0x74,0x28,0x31,0x36,0x2e,0x30,
    0x20,0x2d,0x20,0x28,0x5f,0x31,0x35,0x33,0x2e,0x78,0x20,0x2a,0x20,0x5f,0x31,0x35,
    0x33,0x2e,0x78,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x76,
    0x65,0x63,0x32,0x20,0x5f,0x31,0x35,0x36,0x20,0x3d,0x20,0x5f,0x31,0x35,0x33,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x31,0x35,0x36,0x2e,0x79,0x20,
    0x3d,0x20,0x2d,0x5f,0x36,0x39,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x64,0x20,0x3d,0x20,0x5f,0x31,0x35,0x36,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x76,0x65,0x63,0x32,0x20,0x5f,0x31,0x35,0x38,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x32,0x20,0x5f,0x31,0x36,0x30,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6f,0x72,0x20,0x28,0x3b,0x20,0x64,
    0x2e,0x79,0x20,0x3c,0x3d,0x20,0x5f,0x36,0x39,0x3b,0x20,0x5f,0x31,0x35,0x38,0x20,
    0x3d,0x20,0x64,0x2c,0x20,0x5f,0x31,0x36,0x30,0x20,0x3d,0x20,0x5f,0x31,0x35,0x38,
    0x2c,0x20,0x5f,0x31,0x36,0x30,0x2e,0x79,0x20,0x3d,0x20,0x5f,0x31,0x35,0x38,0x2e,
    0x79,0x20,0x2b,0x20,0x31,0x2e,0x30,0x2c,0x20,0x64,0x20,0x3d,0x20,0x5f,0x31,0x36,
    0x30,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x31,
    0x30,0x39,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x4f,0x45,0x44,
    0x4e,0x4f,0x49,0x53,0x45,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x4f,0x45,
    0x44,0x4e,0x4f,0x49,0x53,0x45,0x5f,0x73,0x6d,0x70,0x2c,0x20,0x75,0x76,0x20,0x2b,
    0x20,0x28,0x64,0x20,0x2f,0x20,0x4f,0x45,0x44,0x4e,0x4f,0x49,0x53,0x45,0x5f,0x70,
    0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2e,0x78,0x79,0x29,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,
    0x5f,0x31,0x31,0x37,0x20,0x3d,0x20,0x28,0x5f,0x31,0x30,0x39,0x20,0x2d,0x20,0x5f,
    0x32,0x34,0x29,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x32,0x38,0x20,
    0x3d,0x20,0x28,0x65,0x78,0x70,0x28,0x64,0x6f,0x74,0x28,0x5f,0x31,0x31,0x37,0x2c,
    0x20,0x5f,0x31,0x31,0x37,0x29,0x20,0x2a,0x20,0x28,0x2d,0x35,0x30,0x2e,0x30,0x29,
    0x29,0x20,0x2a,0x20,0x33,0x2e,0x39,0x38,0x39,0x34,0x32,0x32,0x37,0x39,0x38,0x31,
    0x35,0x36,0x37,0x33,0x38,0x32,0x38,0x31,0x32,0x35,0x29,0x20,0x2a,0x20,0x28,0x65,
    0x78,0x70,0x28,0x64,0x6f,0x74,0x28,0x64,0x2c,0x20,0x64,0x29,0x20,0x2a,0x20,0x28,
    0x2d,0x30,0x2e,0x31,0x32,0x35,0x29,0x29,0x20,0x2a,0x20,0x33,0x2e,0x31,0x38,0x33,
    0x30,0x39,0x38,0x37,0x39,0x33,0x30,0x32,0x39,0x37,0x38,0x35,0x31,0x35,0x36,0x32,
    0x35,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x7a,0x42,0x75,0x66,0x66,0x20,0x2b,0x3d,0x20,0x5f,0x31,0x32,0x38,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x61,0x42,0x75,0x66,0x66,
    0x20,0x2b,0x3d,0x20,0x28,0x5f,0x31,0x30,0x39,0x20,0x2a,0x20,0x5f,0x31,0x32,0x38,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,
    0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,
    0x72,0x20,0x3d,0x20,0x61,0x42,0x75,0x66,0x66,0x20,0x2f,0x20,0x76,0x65,0x63,0x34,
    0x28,0x7a,0x42,0x75,0x66,0x66,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
#endif
static inline const sg_shader_desc* OEDNOISE_shader_desc(sg_backend backend) {
    #if defined(SOKOL_GLCORE)
    if (backend == SG_BACKEND_GLCORE) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.vertex_func.source = (const char*)vs_OEDNOISE_source_glsl410;
            desc.vertex_func.entry = "main";
            desc.fragment_func.source = (const char*)fs_OEDNOISE_source_glsl410;
            desc.fragment_func.entry = "main";
            desc.attrs[0].base_type = SG_SHADERATTRBASETYPE_FLOAT;
            desc.attrs[0].glsl_name = "OEDNOISE_position";
            desc.attrs[1].base_type = SG_SHADERATTRBASETYPE_FLOAT;
            desc.attrs[1].glsl_name = "OEDNOISE_texcoord";
            desc.uniform_blocks[1].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.uniform_blocks[1].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[1].size = 16;
            desc.uniform_blocks[1].glsl_uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
            desc.uniform_blocks[1].glsl_uniforms[0].array_count = 1;
            desc.uniform_blocks[1].glsl_uniforms[0].glsl_name = "OEDNOISE_params";
            desc.images[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.images[0].image_type = SG_IMAGETYPE_2D;
            desc.images[0].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.images[0].multisampled = false;
            desc.samplers[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.samplers[0].sampler_type = SG_SAMPLERTYPE_FILTERING;
            desc.image_sampler_pairs[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.image_sampler_pairs[0].image_slot = 0;
            desc.image_sampler_pairs[0].sampler_slot = 0;
            desc.image_sampler_pairs[0].glsl_name = "OEDNOISE_texture_OEDNOISE_smp";
            desc.label = "OEDNOISE_shader";
        }
        return &desc;
    }
    #endif /* SOKOL_GLCORE */
    return 0;
}
