#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline:
        sokol-shdc --input shaders/ssao.glsl --output include/OE/ssao.glsl.h --format sokol --slang glsl410 --ifdef

    Overview:
    =========
    Shader program: 'OESSAO':
        Get shader desc: OESSAO_shader_desc(sg_query_backend());
        Vertex Shader: vs_OESSAO
        Fragment Shader: fs_OESSAO
        Attributes:
            ATTR_OESSAO_OESSAO_position => 0
            ATTR_OESSAO_OESSAO_texcoord => 1
    Bindings:
        Uniform block 'OESSAO_params':
            C struct: OESSAO_params_t
            Bind slot: UB_OESSAO_params => 4
        Texture 'OESSAO_texture':
            Image type: SG_IMAGETYPE_2D
            Sample type: SG_IMAGESAMPLETYPE_FLOAT
            Multisampled: false
            Bind slot: VIEW_OESSAO_texture => 0
        Texture 'OESSAO_ptexture':
            Image type: SG_IMAGETYPE_2D
            Sample type: SG_IMAGESAMPLETYPE_FLOAT
            Multisampled: false
            Bind slot: VIEW_OESSAO_ptexture => 3
        Texture 'OESSAO_ntexture':
            Image type: SG_IMAGETYPE_2D
            Sample type: SG_IMAGESAMPLETYPE_FLOAT
            Multisampled: false
            Bind slot: VIEW_OESSAO_ntexture => 2
        Sampler 'OESSAO_smp':
            Type: SG_SAMPLERTYPE_FILTERING
            Bind slot: SMP_OESSAO_smp => 0
*/
#if !defined(SOKOL_GFX_INCLUDED)
#error "Please include sokol_gfx.h before ssao.glsl.h"
#endif
#if !defined(SOKOL_SHDC_ALIGN)
#if defined(_MSC_VER)
#define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
#else
#define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
#endif
#endif
#define ATTR_OESSAO_OESSAO_position (0)
#define ATTR_OESSAO_OESSAO_texcoord (1)
#define UB_OESSAO_params (4)
#define VIEW_OESSAO_texture (0)
#define VIEW_OESSAO_ptexture (3)
#define VIEW_OESSAO_ntexture (2)
#define SMP_OESSAO_smp (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct OESSAO_params_t {
    vec4 kernel[128];
    mat4x4 proj;
} OESSAO_params_t;
#pragma pack(pop)
/*
    #version 410

    layout(location = 0) out vec2 uv;
    layout(location = 1) in vec2 OESSAO_texcoord;
    layout(location = 0) in vec2 OESSAO_position;

    void main()
    {
        uv = OESSAO_texcoord;
        gl_Position = vec4(OESSAO_position, 0.0, 1.0);
    }

*/
#if defined(SOKOL_GLCORE)
static const uint8_t vs_OESSAO_source_glsl410[236] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x34,0x31,0x30,0x0a,0x0a,0x6c,0x61,
    0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x75,0x76,0x3b,0x0a,
    0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x31,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x4f,0x45,0x53,
    0x53,0x41,0x4f,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x6c,0x61,
    0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x4f,0x45,0x53,0x53,0x41,
    0x4f,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x0a,0x76,0x6f,0x69,
    0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x75,
    0x76,0x20,0x3d,0x20,0x4f,0x45,0x53,0x53,0x41,0x4f,0x5f,0x74,0x65,0x78,0x63,0x6f,
    0x6f,0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,
    0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x4f,0x45,0x53,0x53,
    0x41,0x4f,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x30,0x2e,0x30,
    0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
#endif
/*
    #version 410

    uniform vec4 OESSAO_params[132];
    uniform sampler2D OESSAO_texture_OESSAO_smp;
    uniform sampler2D OESSAO_ptexture_OESSAO_smp;
    uniform sampler2D OESSAO_ntexture_OESSAO_smp;

    layout(location = 0) in vec2 uv;
    layout(location = 0) out vec4 frag_color;

    float QISQRT(float _x)
    {
        return _x * (1.5 - (((0.5 * _x) * _x) * _x));
    }

    vec3 WNORM(vec3 _x)
    {
        float param = ((_x.x * _x.x) + (_x.y * _x.y)) + (_x.z * _x.z);
        float param_1 = ((_x.x * _x.x) + (_x.y * _x.y)) + (_x.z * _x.z);
        float param_2 = ((_x.x * _x.x) + (_x.y * _x.y)) + (_x.z * _x.z);
        return vec3(_x.x * QISQRT(param), _x.y * QISQRT(param_1), _x.z * QISQRT(param_2));
    }

    void main()
    {
        vec4 _132 = texture(OESSAO_texture_OESSAO_smp, uv);
        vec4 _140 = texture(OESSAO_ptexture_OESSAO_smp, uv);
        vec3 _141 = _140.xyz;
        if (length(_141) < 0.001000000047497451305389404296875)
        {
            frag_color = vec4(_132.xyz, 1.0);
            return;
        }
        vec3 param = (texture(OESSAO_ntexture_OESSAO_smp, uv).xyz * 2.0) - vec3(1.0);
        vec3 _171 = WNORM(param);
        bvec3 _182 = bvec3(abs(_171.z) < 0.999000012874603271484375);
        vec3 param_1 = cross(vec3(_182.x ? vec3(0.0, 0.0, 1.0).x : vec3(1.0, 0.0, 0.0).x, _182.y ? vec3(0.0, 0.0, 1.0).y : vec3(1.0, 0.0, 0.0).y, _182.z ? vec3(0.0, 0.0, 1.0).z : vec3(1.0, 0.0, 0.0).z), _171);
        vec3 _189 = WNORM(param_1);
        mat3 _212 = mat3(_189, cross(_171, _189), _171);
        float AO = 0.0;
        for (int i = 0; i < 128; i++)
        {
            vec3 _243 = _141 + ((_212 * OESSAO_params[i * 1 + 0].xyz) * 0.25);
            vec4 _254 = mat4(OESSAO_params[128], OESSAO_params[129], OESSAO_params[130], OESSAO_params[131]) * vec4(_243, 1.0);
            vec2 _266 = ((_254.xy / vec2(_254.w)) * 0.5) + vec2(0.5);
            bool _271 = any(lessThan(_266, vec2(0.0)));
            bool _279;
            if (!_271)
            {
                _279 = any(greaterThan(_266, vec2(1.0)));
            }
            else
            {
                _279 = _271;
            }
            if (_279)
            {
                continue;
            }
            vec4 _288 = texture(OESSAO_ptexture_OESSAO_smp, _266);
            if (length(_288.xyz) < 0.001000000047497451305389404296875)
            {
                continue;
            }
            float _300 = _288.z;
            AO += (float(_300 <= (_243.z + 0.0500000007450580596923828125)) * smoothstep(0.0, 0.25, abs(_140.z - _300)));
        }
        float _318 = AO;
        float _321 = 1.0 - (_318 * 0.0078125);
        AO = _321;
        frag_color = vec4(_132.xyz * _321, 1.0);
    }

*/
#if defined(SOKOL_GLCORE)
static const uint8_t fs_OESSAO_source_glsl410[2469] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x34,0x31,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x4f,0x45,0x53,0x53,0x41,
    0x4f,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x33,0x32,0x5d,0x3b,0x0a,0x75,
    0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,
    0x20,0x4f,0x45,0x53,0x53,0x41,0x4f,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,
    0x4f,0x45,0x53,0x53,0x41,0x4f,0x5f,0x73,0x6d,0x70,0x3b,0x0a,0x75,0x6e,0x69,0x66,
    0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x4f,0x45,
    0x53,0x53,0x41,0x4f,0x5f,0x70,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x4f,0x45,
    0x53,0x53,0x41,0x4f,0x5f,0x73,0x6d,0x70,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,
    0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x4f,0x45,0x53,0x53,
    0x41,0x4f,0x5f,0x6e,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x4f,0x45,0x53,0x53,
    0x41,0x4f,0x5f,0x73,0x6d,0x70,0x3b,0x0a,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,
    0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,
    0x20,0x76,0x65,0x63,0x32,0x20,0x75,0x76,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,
    0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,
    0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,
    0x6f,0x72,0x3b,0x0a,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x20,0x51,0x49,0x53,0x51,0x52,
    0x54,0x28,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x78,0x29,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x5f,0x78,0x20,0x2a,0x20,0x28,0x31,
    0x2e,0x35,0x20,0x2d,0x20,0x28,0x28,0x28,0x30,0x2e,0x35,0x20,0x2a,0x20,0x5f,0x78,
    0x29,0x20,0x2a,0x20,0x5f,0x78,0x29,0x20,0x2a,0x20,0x5f,0x78,0x29,0x29,0x3b,0x0a,
    0x7d,0x0a,0x0a,0x76,0x65,0x63,0x33,0x20,0x57,0x4e,0x4f,0x52,0x4d,0x28,0x76,0x65,
    0x63,0x33,0x20,0x5f,0x78,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x28,0x28,0x5f,0x78,0x2e,
    0x78,0x20,0x2a,0x20,0x5f,0x78,0x2e,0x78,0x29,0x20,0x2b,0x20,0x28,0x5f,0x78,0x2e,
    0x79,0x20,0x2a,0x20,0x5f,0x78,0x2e,0x79,0x29,0x29,0x20,0x2b,0x20,0x28,0x5f,0x78,
    0x2e,0x7a,0x20,0x2a,0x20,0x5f,0x78,0x2e,0x7a,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,0x20,
    0x28,0x28,0x5f,0x78,0x2e,0x78,0x20,0x2a,0x20,0x5f,0x78,0x2e,0x78,0x29,0x20,0x2b,
    0x20,0x28,0x5f,0x78,0x2e,0x79,0x20,0x2a,0x20,0x5f,0x78,0x2e,0x79,0x29,0x29,0x20,
    0x2b,0x20,0x28,0x5f,0x78,0x2e,0x7a,0x20,0x2a,0x20,0x5f,0x78,0x2e,0x7a,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,
    0x5f,0x32,0x20,0x3d,0x20,0x28,0x28,0x5f,0x78,0x2e,0x78,0x20,0x2a,0x20,0x5f,0x78,
    0x2e,0x78,0x29,0x20,0x2b,0x20,0x28,0x5f,0x78,0x2e,0x79,0x20,0x2a,0x20,0x5f,0x78,
    0x2e,0x79,0x29,0x29,0x20,0x2b,0x20,0x28,0x5f,0x78,0x2e,0x7a,0x20,0x2a,0x20,0x5f,
    0x78,0x2e,0x7a,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,
    0x20,0x76,0x65,0x63,0x33,0x28,0x5f,0x78,0x2e,0x78,0x20,0x2a,0x20,0x51,0x49,0x53,
    0x51,0x52,0x54,0x28,0x70,0x61,0x72,0x61,0x6d,0x29,0x2c,0x20,0x5f,0x78,0x2e,0x79,
    0x20,0x2a,0x20,0x51,0x49,0x53,0x51,0x52,0x54,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,
    0x31,0x29,0x2c,0x20,0x5f,0x78,0x2e,0x7a,0x20,0x2a,0x20,0x51,0x49,0x53,0x51,0x52,
    0x54,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x29,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,
    0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x31,0x33,0x32,0x20,0x3d,0x20,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x28,0x4f,0x45,0x53,0x53,0x41,0x4f,0x5f,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x5f,0x4f,0x45,0x53,0x53,0x41,0x4f,0x5f,0x73,0x6d,0x70,0x2c,
    0x20,0x75,0x76,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,
    0x31,0x34,0x30,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x4f,0x45,
    0x53,0x53,0x41,0x4f,0x5f,0x70,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x4f,0x45,
    0x53,0x53,0x41,0x4f,0x5f,0x73,0x6d,0x70,0x2c,0x20,0x75,0x76,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x31,0x34,0x31,0x20,0x3d,0x20,0x5f,
    0x31,0x34,0x30,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,
    0x28,0x6c,0x65,0x6e,0x67,0x74,0x68,0x28,0x5f,0x31,0x34,0x31,0x29,0x20,0x3c,0x20,
    0x30,0x2e,0x30,0x30,0x31,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x34,0x37,0x34,0x39,
    0x37,0x34,0x35,0x31,0x33,0x30,0x35,0x33,0x38,0x39,0x34,0x30,0x34,0x32,0x39,0x36,
    0x38,0x37,0x35,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,
    0x76,0x65,0x63,0x34,0x28,0x5f,0x31,0x33,0x32,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x31,
    0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x74,
    0x75,0x72,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x76,
    0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x28,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x28,0x4f,0x45,0x53,0x53,0x41,0x4f,0x5f,0x6e,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x5f,0x4f,0x45,0x53,0x53,0x41,0x4f,0x5f,0x73,0x6d,0x70,0x2c,
    0x20,0x75,0x76,0x29,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x32,0x2e,0x30,0x29,0x20,
    0x2d,0x20,0x76,0x65,0x63,0x33,0x28,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x31,0x37,0x31,0x20,0x3d,0x20,0x57,0x4e,0x4f,
    0x52,0x4d,0x28,0x70,0x61,0x72,0x61,0x6d,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x62,
    0x76,0x65,0x63,0x33,0x20,0x5f,0x31,0x38,0x32,0x20,0x3d,0x20,0x62,0x76,0x65,0x63,
    0x33,0x28,0x61,0x62,0x73,0x28,0x5f,0x31,0x37,0x31,0x2e,0x7a,0x29,0x20,0x3c,0x20,
    0x30,0x2e,0x39,0x39,0x39,0x30,0x30,0x30,0x30,0x31,0x32,0x38,0x37,0x34,0x36,0x30,
    0x33,0x32,0x37,0x31,0x34,0x38,0x34,0x33,0x37,0x35,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,0x20,
    0x63,0x72,0x6f,0x73,0x73,0x28,0x76,0x65,0x63,0x33,0x28,0x5f,0x31,0x38,0x32,0x2e,
    0x78,0x20,0x3f,0x20,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,
    0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x2e,0x78,0x20,0x3a,0x20,0x76,0x65,0x63,0x33,
    0x28,0x31,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x29,0x2e,
    0x78,0x2c,0x20,0x5f,0x31,0x38,0x32,0x2e,0x79,0x20,0x3f,0x20,0x76,0x65,0x63,0x33,
    0x28,0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x2e,
    0x79,0x20,0x3a,0x20,0x76,0x65,0x63,0x33,0x28,0x31,0x2e,0x30,0x2c,0x20,0x30,0x2e,
    0x30,0x2c,0x20,0x30,0x2e,0x30,0x29,0x2e,0x79,0x2c,0x20,0x5f,0x31,0x38,0x32,0x2e,
    0x7a,0x20,0x3f,0x20,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,
    0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x2e,0x7a,0x20,0x3a,0x20,0x76,0x65,0x63,0x33,
    0x28,0x31,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x29,0x2e,
    0x7a,0x29,0x2c,0x20,0x5f,0x31,0x37,0x31,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,
    0x65,0x63,0x33,0x20,0x5f,0x31,0x38,0x39,0x20,0x3d,0x20,0x57,0x4e,0x4f,0x52,0x4d,
    0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6d,
    0x61,0x74,0x33,0x20,0x5f,0x32,0x31,0x32,0x20,0x3d,0x20,0x6d,0x61,0x74,0x33,0x28,
    0x5f,0x31,0x38,0x39,0x2c,0x20,0x63,0x72,0x6f,0x73,0x73,0x28,0x5f,0x31,0x37,0x31,
    0x2c,0x20,0x5f,0x31,0x38,0x39,0x29,0x2c,0x20,0x5f,0x31,0x37,0x31,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x41,0x4f,0x20,0x3d,0x20,0x30,
    0x2e,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6f,0x72,0x20,0x28,0x69,0x6e,0x74,
    0x20,0x69,0x20,0x3d,0x20,0x30,0x3b,0x20,0x69,0x20,0x3c,0x20,0x31,0x32,0x38,0x3b,
    0x20,0x69,0x2b,0x2b,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x32,0x34,0x33,0x20,0x3d,0x20,
    0x5f,0x31,0x34,0x31,0x20,0x2b,0x20,0x28,0x28,0x5f,0x32,0x31,0x32,0x20,0x2a,0x20,
    0x4f,0x45,0x53,0x53,0x41,0x4f,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x69,0x20,
    0x2a,0x20,0x31,0x20,0x2b,0x20,0x30,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x20,0x2a,0x20,
    0x30,0x2e,0x32,0x35,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x76,
    0x65,0x63,0x34,0x20,0x5f,0x32,0x35,0x34,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,
    0x4f,0x45,0x53,0x53,0x41,0x4f,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x32,
    0x38,0x5d,0x2c,0x20,0x4f,0x45,0x53,0x53,0x41,0x4f,0x5f,0x70,0x61,0x72,0x61,0x6d,
    0x73,0x5b,0x31,0x32,0x39,0x5d,0x2c,0x20,0x4f,0x45,0x53,0x53,0x41,0x4f,0x5f,0x70,
    0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x33,0x30,0x5d,0x2c,0x20,0x4f,0x45,0x53,0x53,
    0x41,0x4f,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x33,0x31,0x5d,0x29,0x20,
    0x2a,0x20,0x76,0x65,0x63,0x34,0x28,0x5f,0x32,0x34,0x33,0x2c,0x20,0x31,0x2e,0x30,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x32,0x20,
    0x5f,0x32,0x36,0x36,0x20,0x3d,0x20,0x28,0x28,0x5f,0x32,0x35,0x34,0x2e,0x78,0x79,
    0x20,0x2f,0x20,0x76,0x65,0x63,0x32,0x28,0x5f,0x32,0x35,0x34,0x2e,0x77,0x29,0x29,
    0x20,0x2a,0x20,0x30,0x2e,0x35,0x29,0x20,0x2b,0x20,0x76,0x65,0x63,0x32,0x28,0x30,
    0x2e,0x35,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x62,0x6f,0x6f,
    0x6c,0x20,0x5f,0x32,0x37,0x31,0x20,0x3d,0x20,0x61,0x6e,0x79,0x28,0x6c,0x65,0x73,
    0x73,0x54,0x68,0x61,0x6e,0x28,0x5f,0x32,0x36,0x36,0x2c,0x20,0x76,0x65,0x63,0x32,
    0x28,0x30,0x2e,0x30,0x29,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x62,0x6f,0x6f,0x6c,0x20,0x5f,0x32,0x37,0x39,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x21,0x5f,0x32,0x37,0x31,0x29,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x5f,0x32,0x37,0x39,0x20,0x3d,0x20,0x61,0x6e,0x79,0x28,
    0x67,0x72,0x65,0x61,0x74,0x65,0x72,0x54,0x68,0x61,0x6e,0x28,0x5f,0x32,0x36,0x36,
    0x2c,0x20,0x76,0x65,0x63,0x32,0x28,0x31,0x2e,0x30,0x29,0x29,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x32,0x37,0x39,
    0x20,0x3d,0x20,0x5f,0x32,0x37,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,
    0x32,0x37,0x39,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x6f,0x6e,0x74,0x69,
    0x6e,0x75,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x32,0x38,0x38,
    0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x4f,0x45,0x53,0x53,0x41,
    0x4f,0x5f,0x70,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x4f,0x45,0x53,0x53,0x41,
    0x4f,0x5f,0x73,0x6d,0x70,0x2c,0x20,0x5f,0x32,0x36,0x36,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x6c,0x65,0x6e,0x67,0x74,0x68,
    0x28,0x5f,0x32,0x38,0x38,0x2e,0x78,0x79,0x7a,0x29,0x20,0x3c,0x20,0x30,0x2e,0x30,
    0x30,0x31,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x34,0x37,0x34,0x39,0x37,0x34,0x35,
    0x31,0x33,0x30,0x35,0x33,0x38,0x39,0x34,0x30,0x34,0x32,0x39,0x36,0x38,0x37,0x35,
    0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x6f,0x6e,0x74,0x69,0x6e,0x75,0x65,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x33,0x30,0x30,0x20,0x3d,
    0x20,0x5f,0x32,0x38,0x38,0x2e,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x41,0x4f,0x20,0x2b,0x3d,0x20,0x28,0x66,0x6c,0x6f,0x61,0x74,0x28,0x5f,0x33,
    0x30,0x30,0x20,0x3c,0x3d,0x20,0x28,0x5f,0x32,0x34,0x33,0x2e,0x7a,0x20,0x2b,0x20,
    0x30,0x2e,0x30,0x35,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x37,0x34,0x35,0x30,0x35,
    0x38,0x30,0x35,0x39,0x36,0x39,0x32,0x33,0x38,0x32,0x38,0x31,0x32,0x35,0x29,0x29,
    0x20,0x2a,0x20,0x73,0x6d,0x6f,0x6f,0x74,0x68,0x73,0x74,0x65,0x70,0x28,0x30,0x2e,
    0x30,0x2c,0x20,0x30,0x2e,0x32,0x35,0x2c,0x20,0x61,0x62,0x73,0x28,0x5f,0x31,0x34,
    0x30,0x2e,0x7a,0x20,0x2d,0x20,0x5f,0x33,0x30,0x30,0x29,0x29,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,
    0x33,0x31,0x38,0x20,0x3d,0x20,0x41,0x4f,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x20,0x5f,0x33,0x32,0x31,0x20,0x3d,0x20,0x31,0x2e,0x30,0x20,0x2d,
    0x20,0x28,0x5f,0x33,0x31,0x38,0x20,0x2a,0x20,0x30,0x2e,0x30,0x30,0x37,0x38,0x31,
    0x32,0x35,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x41,0x4f,0x20,0x3d,0x20,0x5f,0x33,
    0x32,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,
    0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x5f,0x31,0x33,0x32,0x2e,0x78,
    0x79,0x7a,0x20,0x2a,0x20,0x5f,0x33,0x32,0x31,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,
    0x0a,0x7d,0x0a,0x0a,0x00,
};
#endif
static inline const sg_shader_desc* OESSAO_shader_desc(sg_backend backend) {
    #if defined(SOKOL_GLCORE)
    if (backend == SG_BACKEND_GLCORE) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.vertex_func.source = (const char*)vs_OESSAO_source_glsl410;
            desc.vertex_func.entry = "main";
            desc.fragment_func.source = (const char*)fs_OESSAO_source_glsl410;
            desc.fragment_func.entry = "main";
            desc.attrs[0].base_type = SG_SHADERATTRBASETYPE_FLOAT;
            desc.attrs[0].glsl_name = "OESSAO_position";
            desc.attrs[1].base_type = SG_SHADERATTRBASETYPE_FLOAT;
            desc.attrs[1].glsl_name = "OESSAO_texcoord";
            desc.uniform_blocks[4].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.uniform_blocks[4].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[4].size = 2112;
            desc.uniform_blocks[4].glsl_uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
            desc.uniform_blocks[4].glsl_uniforms[0].array_count = 132;
            desc.uniform_blocks[4].glsl_uniforms[0].glsl_name = "OESSAO_params";
            desc.views[0].texture.stage = SG_SHADERSTAGE_FRAGMENT;
            desc.views[0].texture.image_type = SG_IMAGETYPE_2D;
            desc.views[0].texture.sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.views[0].texture.multisampled = false;
            desc.views[2].texture.stage = SG_SHADERSTAGE_FRAGMENT;
            desc.views[2].texture.image_type = SG_IMAGETYPE_2D;
            desc.views[2].texture.sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.views[2].texture.multisampled = false;
            desc.views[3].texture.stage = SG_SHADERSTAGE_FRAGMENT;
            desc.views[3].texture.image_type = SG_IMAGETYPE_2D;
            desc.views[3].texture.sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.views[3].texture.multisampled = false;
            desc.samplers[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.samplers[0].sampler_type = SG_SAMPLERTYPE_FILTERING;
            desc.texture_sampler_pairs[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.texture_sampler_pairs[0].view_slot = 0;
            desc.texture_sampler_pairs[0].sampler_slot = 0;
            desc.texture_sampler_pairs[0].glsl_name = "OESSAO_texture_OESSAO_smp";
            desc.texture_sampler_pairs[1].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.texture_sampler_pairs[1].view_slot = 3;
            desc.texture_sampler_pairs[1].sampler_slot = 0;
            desc.texture_sampler_pairs[1].glsl_name = "OESSAO_ptexture_OESSAO_smp";
            desc.texture_sampler_pairs[2].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.texture_sampler_pairs[2].view_slot = 2;
            desc.texture_sampler_pairs[2].sampler_slot = 0;
            desc.texture_sampler_pairs[2].glsl_name = "OESSAO_ntexture_OESSAO_smp";
            desc.label = "OESSAO_shader";
        }
        return &desc;
    }
    #endif /* SOKOL_GLCORE */
    return 0;
}
