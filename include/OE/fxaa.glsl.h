#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline:
        sokol-shdc --input shaders/fxaa.glsl --output include/OE/fxaa.glsl.h --format sokol --slang glsl410 --ifdef

    Overview:
    =========
    Shader program: 'OEFXAA':
        Get shader desc: OEFXAA_shader_desc(sg_query_backend());
        Vertex Shader: OEFXAA_vs
        Fragment Shader: OEFXAA_fs
        Attributes:
            ATTR_OEFXAA_OEFXAAQuad_position => 0
            ATTR_OEFXAA_OEFXAAQuad_texcoord => 1
    Bindings:
        Uniform block 'OEFXAA_resolution':
            C struct: OEFXAA_resolution_t
            Bind slot: UB_OEFXAA_resolution => 1
        Image 'OEFXAA_texture':
            Image type: SG_IMAGETYPE_2D
            Sample type: SG_IMAGESAMPLETYPE_FLOAT
            Multisampled: false
            Bind slot: IMG_OEFXAA_texture => 0
        Sampler 'OEFXAA_sampler':
            Type: SG_SAMPLERTYPE_FILTERING
            Bind slot: SMP_OEFXAA_sampler => 0
*/
#if !defined(SOKOL_GFX_INCLUDED)
#error "Please include sokol_gfx.h before fxaa.glsl.h"
#endif
#if !defined(SOKOL_SHDC_ALIGN)
#if defined(_MSC_VER)
#define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
#else
#define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
#endif
#endif
#define ATTR_OEFXAA_OEFXAAQuad_position (0)
#define ATTR_OEFXAA_OEFXAAQuad_texcoord (1)
#define UB_OEFXAA_resolution (1)
#define IMG_OEFXAA_texture (0)
#define SMP_OEFXAA_sampler (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct OEFXAA_resolution_t {
    vec2 resolution;
    uint8_t _pad_8[8];
} OEFXAA_resolution_t;
#pragma pack(pop)
/*
    #version 410

    layout(location = 0) out vec2 uv;
    layout(location = 1) in vec2 OEFXAAQuad_texcoord;
    layout(location = 0) in vec2 OEFXAAQuad_position;

    void main()
    {
        uv = OEFXAAQuad_texcoord;
        gl_Position = vec4(OEFXAAQuad_position, 0.0, 1.0);
    }

*/
#if defined(SOKOL_GLCORE)
static const uint8_t OEFXAA_vs_source_glsl410[252] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x34,0x31,0x30,0x0a,0x0a,0x6c,0x61,
    0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x75,0x76,0x3b,0x0a,
    0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x31,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x4f,0x45,0x46,
    0x58,0x41,0x41,0x51,0x75,0x61,0x64,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,
    0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,
    0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x4f,
    0x45,0x46,0x58,0x41,0x41,0x51,0x75,0x61,0x64,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x75,0x76,0x20,0x3d,0x20,0x4f,0x45,0x46,0x58,
    0x41,0x41,0x51,0x75,0x61,0x64,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x4f,0x45,0x46,0x58,0x41,0x41,0x51,0x75,
    0x61,0x64,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x30,0x2e,0x30,
    0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
#endif
/*
    #version 410

    uniform vec4 OEFXAA_resolution[1];
    uniform sampler2D OEFXAA_texture_OEFXAA_sampler;

    layout(location = 0) in vec2 uv;
    layout(location = 0) out vec4 frag_color;

    void main()
    {
        vec2 _26 = vec2(1.0 / OEFXAA_resolution[0].x, 1.0 / OEFXAA_resolution[0].y);
        float _98 = dot(texture(OEFXAA_texture_OEFXAA_sampler, uv).xyz, vec3(0.2989999949932098388671875, 0.58700001239776611328125, 0.114000000059604644775390625));
        float _101 = dot(texture(OEFXAA_texture_OEFXAA_sampler, uv + (_26 * vec2(-1.0))).xyz, vec3(0.2989999949932098388671875, 0.58700001239776611328125, 0.114000000059604644775390625));
        float _104 = dot(texture(OEFXAA_texture_OEFXAA_sampler, uv + (_26 * vec2(1.0, -1.0))).xyz, vec3(0.2989999949932098388671875, 0.58700001239776611328125, 0.114000000059604644775390625));
        float _107 = dot(texture(OEFXAA_texture_OEFXAA_sampler, uv + (_26 * vec2(-1.0, 1.0))).xyz, vec3(0.2989999949932098388671875, 0.58700001239776611328125, 0.114000000059604644775390625));
        float _110 = dot(texture(OEFXAA_texture_OEFXAA_sampler, uv + _26).xyz, vec3(0.2989999949932098388671875, 0.58700001239776611328125, 0.114000000059604644775390625));
        float _134 = _101 + _104;
        float _139 = -(_134 - (_107 + _110));
        float _146 = (_101 + _107) - (_104 + _110);
        vec2 _180 = clamp(vec2(_139, _146) * (1.0 / (min(abs(_139), abs(_146)) + max(((_134 + _107) + _110) * 0.03125, 0.0078125))), vec2(-8.0), vec2(8.0)) * _26;
        vec3 _204 = (texture(OEFXAA_texture_OEFXAA_sampler, uv + (_180 * (-0.16666667163372039794921875))).xyz + texture(OEFXAA_texture_OEFXAA_sampler, uv + (_180 * 0.16666667163372039794921875)).xyz) * 0.5;
        vec3 _230 = ((texture(OEFXAA_texture_OEFXAA_sampler, uv + (_180 * (-0.5))).xyz + texture(OEFXAA_texture_OEFXAA_sampler, uv + (_180 * 0.5)).xyz) * 0.25) + (_204 * 0.5);
        float _233 = dot(_230, vec3(0.2989999949932098388671875, 0.58700001239776611328125, 0.114000000059604644775390625));
        bvec3 _247 = bvec3((_233 < min(_98, min(min(_101, _104), min(_107, _110)))) || (_233 > max(_98, max(max(_101, _104), max(_107, _110)))));
        frag_color = vec4(vec3(_247.x ? _204.x : _230.x, _247.y ? _204.y : _230.y, _247.z ? _204.z : _230.z), 1.0);
    }

*/
#if defined(SOKOL_GLCORE)
static const uint8_t OEFXAA_fs_source_glsl410[2197] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x34,0x31,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x4f,0x45,0x46,0x58,0x41,
    0x41,0x5f,0x72,0x65,0x73,0x6f,0x6c,0x75,0x74,0x69,0x6f,0x6e,0x5b,0x31,0x5d,0x3b,
    0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,
    0x32,0x44,0x20,0x4f,0x45,0x46,0x58,0x41,0x41,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x5f,0x4f,0x45,0x46,0x58,0x41,0x41,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,
    0x3b,0x0a,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,
    0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,
    0x75,0x76,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,
    0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,
    0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x76,
    0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x76,0x65,0x63,0x32,0x20,0x5f,0x32,0x36,0x20,0x3d,0x20,0x76,0x65,0x63,0x32,
    0x28,0x31,0x2e,0x30,0x20,0x2f,0x20,0x4f,0x45,0x46,0x58,0x41,0x41,0x5f,0x72,0x65,
    0x73,0x6f,0x6c,0x75,0x74,0x69,0x6f,0x6e,0x5b,0x30,0x5d,0x2e,0x78,0x2c,0x20,0x31,
    0x2e,0x30,0x20,0x2f,0x20,0x4f,0x45,0x46,0x58,0x41,0x41,0x5f,0x72,0x65,0x73,0x6f,
    0x6c,0x75,0x74,0x69,0x6f,0x6e,0x5b,0x30,0x5d,0x2e,0x79,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x39,0x38,0x20,0x3d,0x20,0x64,0x6f,
    0x74,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x4f,0x45,0x46,0x58,0x41,0x41,
    0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x4f,0x45,0x46,0x58,0x41,0x41,0x5f,
    0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x75,0x76,0x29,0x2e,0x78,0x79,0x7a,
    0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x32,0x39,0x38,0x39,0x39,0x39,0x39,
    0x39,0x34,0x39,0x39,0x33,0x32,0x30,0x39,0x38,0x33,0x38,0x38,0x36,0x37,0x31,0x38,
    0x37,0x35,0x2c,0x20,0x30,0x2e,0x35,0x38,0x37,0x30,0x30,0x30,0x30,0x31,0x32,0x33,
    0x39,0x37,0x37,0x36,0x36,0x31,0x31,0x33,0x32,0x38,0x31,0x32,0x35,0x2c,0x20,0x30,
    0x2e,0x31,0x31,0x34,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x35,0x39,0x36,0x30,0x34,
    0x36,0x34,0x34,0x37,0x37,0x35,0x33,0x39,0x30,0x36,0x32,0x35,0x29,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x30,0x31,0x20,0x3d,
    0x20,0x64,0x6f,0x74,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x4f,0x45,0x46,
    0x58,0x41,0x41,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x4f,0x45,0x46,0x58,
    0x41,0x41,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x75,0x76,0x20,0x2b,
    0x20,0x28,0x5f,0x32,0x36,0x20,0x2a,0x20,0x76,0x65,0x63,0x32,0x28,0x2d,0x31,0x2e,
    0x30,0x29,0x29,0x29,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x30,
    0x2e,0x32,0x39,0x38,0x39,0x39,0x39,0x39,0x39,0x34,0x39,0x39,0x33,0x32,0x30,0x39,
    0x38,0x33,0x38,0x38,0x36,0x37,0x31,0x38,0x37,0x35,0x2c,0x20,0x30,0x2e,0x35,0x38,
    0x37,0x30,0x30,0x30,0x30,0x31,0x32,0x33,0x39,0x37,0x37,0x36,0x36,0x31,0x31,0x33,
    0x32,0x38,0x31,0x32,0x35,0x2c,0x20,0x30,0x2e,0x31,0x31,0x34,0x30,0x30,0x30,0x30,
    0x30,0x30,0x30,0x35,0x39,0x36,0x30,0x34,0x36,0x34,0x34,0x37,0x37,0x35,0x33,0x39,
    0x30,0x36,0x32,0x35,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x5f,0x31,0x30,0x34,0x20,0x3d,0x20,0x64,0x6f,0x74,0x28,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x28,0x4f,0x45,0x46,0x58,0x41,0x41,0x5f,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x5f,0x4f,0x45,0x46,0x58,0x41,0x41,0x5f,0x73,0x61,0x6d,0x70,0x6c,
    0x65,0x72,0x2c,0x20,0x75,0x76,0x20,0x2b,0x20,0x28,0x5f,0x32,0x36,0x20,0x2a,0x20,
    0x76,0x65,0x63,0x32,0x28,0x31,0x2e,0x30,0x2c,0x20,0x2d,0x31,0x2e,0x30,0x29,0x29,
    0x29,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x32,0x39,
    0x38,0x39,0x39,0x39,0x39,0x39,0x34,0x39,0x39,0x33,0x32,0x30,0x39,0x38,0x33,0x38,
    0x38,0x36,0x37,0x31,0x38,0x37,0x35,0x2c,0x20,0x30,0x2e,0x35,0x38,0x37,0x30,0x30,
    0x30,0x30,0x31,0x32,0x33,0x39,0x37,0x37,0x36,0x36,0x31,0x31,0x33,0x32,0x38,0x31,
    0x32,0x35,0x2c,0x20,0x30,0x2e,0x31,0x31,0x34,0x30,0x30,0x30,0x30,0x30,0x30,0x30,
    0x35,0x39,0x36,0x30,0x34,0x36,0x34,0x34,0x37,0x37,0x35,0x33,0x39,0x30,0x36,0x32,
    0x35,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,
    0x31,0x30,0x37,0x20,0x3d,0x20,0x64,0x6f,0x74,0x28,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x28,0x4f,0x45,0x46,0x58,0x41,0x41,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x5f,0x4f,0x45,0x46,0x58,0x41,0x41,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,
    0x20,0x75,0x76,0x20,0x2b,0x20,0x28,0x5f,0x32,0x36,0x20,0x2a,0x20,0x76,0x65,0x63,
    0x32,0x28,0x2d,0x31,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x29,0x2e,0x78,
    0x79,0x7a,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x32,0x39,0x38,0x39,0x39,
    0x39,0x39,0x39,0x34,0x39,0x39,0x33,0x32,0x30,0x39,0x38,0x33,0x38,0x38,0x36,0x37,
    0x31,0x38,0x37,0x35,0x2c,0x20,0x30,0x2e,0x35,0x38,0x37,0x30,0x30,0x30,0x30,0x31,
    0x32,0x33,0x39,0x37,0x37,0x36,0x36,0x31,0x31,0x33,0x32,0x38,0x31,0x32,0x35,0x2c,
    0x20,0x30,0x2e,0x31,0x31,0x34,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x35,0x39,0x36,
    0x30,0x34,0x36,0x34,0x34,0x37,0x37,0x35,0x33,0x39,0x30,0x36,0x32,0x35,0x29,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x31,0x30,
    0x20,0x3d,0x20,0x64,0x6f,0x74,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x4f,
    0x45,0x46,0x58,0x41,0x41,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x4f,0x45,
    0x46,0x58,0x41,0x41,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x75,0x76,
    0x20,0x2b,0x20,0x5f,0x32,0x36,0x29,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x76,0x65,0x63,
    0x33,0x28,0x30,0x2e,0x32,0x39,0x38,0x39,0x39,0x39,0x39,0x39,0x34,0x39,0x39,0x33,
    0x32,0x30,0x39,0x38,0x33,0x38,0x38,0x36,0x37,0x31,0x38,0x37,0x35,0x2c,0x20,0x30,
    0x2e,0x35,0x38,0x37,0x30,0x30,0x30,0x30,0x31,0x32,0x33,0x39,0x37,0x37,0x36,0x36,
    0x31,0x31,0x33,0x32,0x38,0x31,0x32,0x35,0x2c,0x20,0x30,0x2e,0x31,0x31,0x34,0x30,
    0x30,0x30,0x30,0x30,0x30,0x30,0x35,0x39,0x36,0x30,0x34,0x36,0x34,0x34,0x37,0x37,
    0x35,0x33,0x39,0x30,0x36,0x32,0x35,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x33,0x34,0x20,0x3d,0x20,0x5f,0x31,0x30,0x31,
    0x20,0x2b,0x20,0x5f,0x31,0x30,0x34,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x5f,0x31,0x33,0x39,0x20,0x3d,0x20,0x2d,0x28,0x5f,0x31,0x33,0x34,
    0x20,0x2d,0x20,0x28,0x5f,0x31,0x30,0x37,0x20,0x2b,0x20,0x5f,0x31,0x31,0x30,0x29,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x34,
    0x36,0x20,0x3d,0x20,0x28,0x5f,0x31,0x30,0x31,0x20,0x2b,0x20,0x5f,0x31,0x30,0x37,
    0x29,0x20,0x2d,0x20,0x28,0x5f,0x31,0x30,0x34,0x20,0x2b,0x20,0x5f,0x31,0x31,0x30,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x32,0x20,0x5f,0x31,0x38,0x30,
    0x20,0x3d,0x20,0x63,0x6c,0x61,0x6d,0x70,0x28,0x76,0x65,0x63,0x32,0x28,0x5f,0x31,
    0x33,0x39,0x2c,0x20,0x5f,0x31,0x34,0x36,0x29,0x20,0x2a,0x20,0x28,0x31,0x2e,0x30,
    0x20,0x2f,0x20,0x28,0x6d,0x69,0x6e,0x28,0x61,0x62,0x73,0x28,0x5f,0x31,0x33,0x39,
    0x29,0x2c,0x20,0x61,0x62,0x73,0x28,0x5f,0x31,0x34,0x36,0x29,0x29,0x20,0x2b,0x20,
    0x6d,0x61,0x78,0x28,0x28,0x28,0x5f,0x31,0x33,0x34,0x20,0x2b,0x20,0x5f,0x31,0x30,
    0x37,0x29,0x20,0x2b,0x20,0x5f,0x31,0x31,0x30,0x29,0x20,0x2a,0x20,0x30,0x2e,0x30,
    0x33,0x31,0x32,0x35,0x2c,0x20,0x30,0x2e,0x30,0x30,0x37,0x38,0x31,0x32,0x35,0x29,
    0x29,0x29,0x2c,0x20,0x76,0x65,0x63,0x32,0x28,0x2d,0x38,0x2e,0x30,0x29,0x2c,0x20,
    0x76,0x65,0x63,0x32,0x28,0x38,0x2e,0x30,0x29,0x29,0x20,0x2a,0x20,0x5f,0x32,0x36,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x32,0x30,0x34,0x20,
    0x3d,0x20,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x4f,0x45,0x46,0x58,0x41,
    0x41,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x4f,0x45,0x46,0x58,0x41,0x41,
    0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x75,0x76,0x20,0x2b,0x20,0x28,
    0x5f,0x31,0x38,0x30,0x20,0x2a,0x20,0x28,0x2d,0x30,0x2e,0x31,0x36,0x36,0x36,0x36,
    0x36,0x36,0x37,0x31,0x36,0x33,0x33,0x37,0x32,0x30,0x33,0x39,0x37,0x39,0x34,0x39,
    0x32,0x31,0x38,0x37,0x35,0x29,0x29,0x29,0x2e,0x78,0x79,0x7a,0x20,0x2b,0x20,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x4f,0x45,0x46,0x58,0x41,0x41,0x5f,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x5f,0x4f,0x45,0x46,0x58,0x41,0x41,0x5f,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x2c,0x20,0x75,0x76,0x20,0x2b,0x20,0x28,0x5f,0x31,0x38,0x30,
    0x20,0x2a,0x20,0x30,0x2e,0x31,0x36,0x36,0x36,0x36,0x36,0x36,0x37,0x31,0x36,0x33,
    0x33,0x37,0x32,0x30,0x33,0x39,0x37,0x39,0x34,0x39,0x32,0x31,0x38,0x37,0x35,0x29,
    0x29,0x2e,0x78,0x79,0x7a,0x29,0x20,0x2a,0x20,0x30,0x2e,0x35,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x32,0x33,0x30,0x20,0x3d,0x20,0x28,0x28,
    0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x4f,0x45,0x46,0x58,0x41,0x41,0x5f,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x4f,0x45,0x46,0x58,0x41,0x41,0x5f,0x73,0x61,
    0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x75,0x76,0x20,0x2b,0x20,0x28,0x5f,0x31,0x38,
    0x30,0x20,0x2a,0x20,0x28,0x2d,0x30,0x2e,0x35,0x29,0x29,0x29,0x2e,0x78,0x79,0x7a,
    0x20,0x2b,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x4f,0x45,0x46,0x58,0x41,
    0x41,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x4f,0x45,0x46,0x58,0x41,0x41,
    0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x75,0x76,0x20,0x2b,0x20,0x28,
    0x5f,0x31,0x38,0x30,0x20,0x2a,0x20,0x30,0x2e,0x35,0x29,0x29,0x2e,0x78,0x79,0x7a,
    0x29,0x20,0x2a,0x20,0x30,0x2e,0x32,0x35,0x29,0x20,0x2b,0x20,0x28,0x5f,0x32,0x30,
    0x34,0x20,0x2a,0x20,0x30,0x2e,0x35,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x20,0x5f,0x32,0x33,0x33,0x20,0x3d,0x20,0x64,0x6f,0x74,0x28,0x5f,
    0x32,0x33,0x30,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x32,0x39,0x38,0x39,
    0x39,0x39,0x39,0x39,0x34,0x39,0x39,0x33,0x32,0x30,0x39,0x38,0x33,0x38,0x38,0x36,
    0x37,0x31,0x38,0x37,0x35,0x2c,0x20,0x30,0x2e,0x35,0x38,0x37,0x30,0x30,0x30,0x30,
    0x31,0x32,0x33,0x39,0x37,0x37,0x36,0x36,0x31,0x31,0x33,0x32,0x38,0x31,0x32,0x35,
    0x2c,0x20,0x30,0x2e,0x31,0x31,0x34,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x35,0x39,
    0x36,0x30,0x34,0x36,0x34,0x34,0x37,0x37,0x35,0x33,0x39,0x30,0x36,0x32,0x35,0x29,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x62,0x76,0x65,0x63,0x33,0x20,0x5f,0x32,0x34,
    0x37,0x20,0x3d,0x20,0x62,0x76,0x65,0x63,0x33,0x28,0x28,0x5f,0x32,0x33,0x33,0x20,
    0x3c,0x20,0x6d,0x69,0x6e,0x28,0x5f,0x39,0x38,0x2c,0x20,0x6d,0x69,0x6e,0x28,0x6d,
    0x69,0x6e,0x28,0x5f,0x31,0x30,0x31,0x2c,0x20,0x5f,0x31,0x30,0x34,0x29,0x2c,0x20,
    0x6d,0x69,0x6e,0x28,0x5f,0x31,0x30,0x37,0x2c,0x20,0x5f,0x31,0x31,0x30,0x29,0x29,
    0x29,0x29,0x20,0x7c,0x7c,0x20,0x28,0x5f,0x32,0x33,0x33,0x20,0x3e,0x20,0x6d,0x61,
    0x78,0x28,0x5f,0x39,0x38,0x2c,0x20,0x6d,0x61,0x78,0x28,0x6d,0x61,0x78,0x28,0x5f,
    0x31,0x30,0x31,0x2c,0x20,0x5f,0x31,0x30,0x34,0x29,0x2c,0x20,0x6d,0x61,0x78,0x28,
    0x5f,0x31,0x30,0x37,0x2c,0x20,0x5f,0x31,0x31,0x30,0x29,0x29,0x29,0x29,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,
    0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x76,0x65,0x63,0x33,0x28,0x5f,0x32,0x34,0x37,
    0x2e,0x78,0x20,0x3f,0x20,0x5f,0x32,0x30,0x34,0x2e,0x78,0x20,0x3a,0x20,0x5f,0x32,
    0x33,0x30,0x2e,0x78,0x2c,0x20,0x5f,0x32,0x34,0x37,0x2e,0x79,0x20,0x3f,0x20,0x5f,
    0x32,0x30,0x34,0x2e,0x79,0x20,0x3a,0x20,0x5f,0x32,0x33,0x30,0x2e,0x79,0x2c,0x20,
    0x5f,0x32,0x34,0x37,0x2e,0x7a,0x20,0x3f,0x20,0x5f,0x32,0x30,0x34,0x2e,0x7a,0x20,
    0x3a,0x20,0x5f,0x32,0x33,0x30,0x2e,0x7a,0x29,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,
    0x0a,0x7d,0x0a,0x0a,0x00,
};
#endif
static inline const sg_shader_desc* OEFXAA_shader_desc(sg_backend backend) {
    #if defined(SOKOL_GLCORE)
    if (backend == SG_BACKEND_GLCORE) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.vertex_func.source = (const char*)OEFXAA_vs_source_glsl410;
            desc.vertex_func.entry = "main";
            desc.fragment_func.source = (const char*)OEFXAA_fs_source_glsl410;
            desc.fragment_func.entry = "main";
            desc.attrs[0].base_type = SG_SHADERATTRBASETYPE_FLOAT;
            desc.attrs[0].glsl_name = "OEFXAAQuad_position";
            desc.attrs[1].base_type = SG_SHADERATTRBASETYPE_FLOAT;
            desc.attrs[1].glsl_name = "OEFXAAQuad_texcoord";
            desc.uniform_blocks[1].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.uniform_blocks[1].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[1].size = 16;
            desc.uniform_blocks[1].glsl_uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
            desc.uniform_blocks[1].glsl_uniforms[0].array_count = 1;
            desc.uniform_blocks[1].glsl_uniforms[0].glsl_name = "OEFXAA_resolution";
            desc.images[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.images[0].image_type = SG_IMAGETYPE_2D;
            desc.images[0].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.images[0].multisampled = false;
            desc.samplers[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.samplers[0].sampler_type = SG_SAMPLERTYPE_FILTERING;
            desc.image_sampler_pairs[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.image_sampler_pairs[0].image_slot = 0;
            desc.image_sampler_pairs[0].sampler_slot = 0;
            desc.image_sampler_pairs[0].glsl_name = "OEFXAA_texture_OEFXAA_sampler";
            desc.label = "OEFXAA_shader";
        }
        return &desc;
    }
    #endif /* SOKOL_GLCORE */
    return 0;
}
